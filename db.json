{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/next.yml","hash":"1cb654c473b6956abd46d014865f2b1ab40e49c6","modified":1756636574371},{"_id":"source/_posts/c语言专题讲解.md","hash":"dec6e961d73f87688e692a7716651bcf4a030c01","modified":1756653388274},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1756564315090},{"_id":"source/about/index.md","hash":"b559946399c37830adf7b2d9a4d30135ab854d3d","modified":1756651196636},{"_id":"source/categories/index.md","hash":"6f15e538e6b21a6616986ff2539bf75ea0907579","modified":1756651269087},{"_id":"source/archives/index.md","hash":"f2ca6e2a98d65fe5d119308c26c72377dc255cbb","modified":1756651262826},{"_id":"source/schedule/index.md","hash":"82d115dcc3fb060f2eee0674f92503f3f8601fb2","modified":1756651284248},{"_id":"source/tags/index.md","hash":"ddd792b9d1d5518f5b6d77802609613baafffdb2","modified":1756651295965},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1756633809842},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1756633809843},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1756633809845},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1756633809843},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1756633809846},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1756633809846},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1756633809845},{"_id":"themes/next/_config.yml","hash":"99fc3ed93322aadb732225e99252188adb85edac","modified":1756650563786},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1756633809846},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1756633809843},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1756633809851},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1756633809864},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1756633809846},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1756633809843},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1756633809844},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1756633809844},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1756633809845},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1756633809844},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1756633809845},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1756633809845},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1756633809845},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1756633809845},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1756633809845},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1756633809846},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1756633809846},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1756633809846},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1756633809848},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1756633809848},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1756633809848},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1756633809848},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1756633809848},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1756633809851},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1756633809848},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1756633809852},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1756633809852},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1756633809852},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1756633809852},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1756633809852},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1756633809852},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1756633809852},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1756633809853},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1756633809852},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1756633809853},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1756633809853},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1756633809853},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1756633809853},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1756633809853},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1756633809853},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1756633809853},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1756633809854},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1756633809854},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1756633809854},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1756633809854},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1756633809863},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1756633809854},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1756633809854},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1756633809864},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1756633809864},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1756633809864},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1756633809864},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1756633809843},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1756633809867},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1756633809844},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1756633809844},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1756633809843},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1756633809864},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1756633809848},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1756633809848},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1756633809848},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1756633809848},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1756633809850},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1756633809850},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1756633809850},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1756633809850},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1756633809850},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1756633809855},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1756633809858},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1756633809851},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1756633809855},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1756633809851},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1756633809856},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1756633809851},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1756633809856},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1756633809861},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1756633809860},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1756633809851},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1756633809862},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1756633809862},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1756633809854},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1756633809855},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1756633809858},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1756633809855},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1756633809858},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1756633809859},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1756633809864},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1756633809858},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1756633809859},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1756633809866},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1756633809866},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1756633809866},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1756633809867},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1756633809867},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1756633809867},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1756633809868},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1756633809866},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1756633809868},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1756633809868},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1756633809868},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1756633809868},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1756633809868},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1756633809867},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1756633809868},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1756633809867},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1756633809869},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1756633809885},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1756633809867},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1756633809867},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1756633809885},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1756633809885},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1756633809886},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1756633809885},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1756633809886},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1756633809885},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1756633809887},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1756633809887},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1756633809886},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1756633809887},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1756633809888},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1756633809887},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1756633809887},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1756633809888},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1756633809888},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1756633809888},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1756633809890},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1756633809888},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1756633809869},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1756633809880},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1756633809885},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1756633809856},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1756633809856},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1756633809856},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1756633809855},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1756633809856},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1756633809856},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1756633809891},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1756633809855},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1756633809856},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1756633809857},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1756633809856},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1756633809857},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1756633809857},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1756633809857},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1756633809857},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1756633809857},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1756633809857},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1756633809858},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1756633809857},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1756633809860},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1756633809860},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1756633809859},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1756633809862},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1756633809860},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1756633809860},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1756633809861},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1756633809862},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1756633809860},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1756633809860},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1756633809862},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1756633809861},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1756633809860},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1756633809861},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1756633809861},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1756633809861},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1756633809861},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1756633809861},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1756633809862},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1756633809863},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1756633809863},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1756633809863},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1756633809858},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1756633809863},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1756633809863},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1756633809862},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1756633809858},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1756633809858},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1756633809859},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1756633809865},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1756633809865},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1756633809865},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1756633809865},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1756633809859},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1756633809865},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1756633809866},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1756633809866},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1756633809890},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1756633809890},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1756633809865},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1756633809865},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1756633809865},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1756633809884},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1756633809866},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1756633809884},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1756633809884},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1756633809893},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1756633809884},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1756633809884},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1756633809869},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1756633809892},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1756633809869},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1756633809869},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1756633809873},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1756633809880},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1756633809880},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1756633809881},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1756633809880},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1756633809881},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1756633809881},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1756633809881},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1756633809881},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1756633809881},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1756633809882},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1756633809881},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1756633809882},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1756633809875},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1756633809876},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1756633809875},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1756633809876},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1756633809877},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1756633809878},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1756633809878},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1756633809878},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1756633809882},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1756633809877},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1756633809882},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1756633809880},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1756633809882},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1756633809884},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1756633809882},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1756633809882},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1756633809891},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1756633809892},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1756633809869},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1756633809869},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1756633809871},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1756633809871},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1756633809871},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1756633809871},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1756633809871},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1756633809871},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1756633809871},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1756633809871},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1756633809872},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1756633809872},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1756633809872},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1756633809872},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1756633809872},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1756633809872},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1756633809873},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1756633809872},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1756633809873},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1756633809873},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1756633809873},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1756633809873},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1756633809874},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1756633809873},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1756633809874},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1756633809874},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1756633809874},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1756633809874},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1756633809874},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1756633809875},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1756633809875},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1756633809875},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1756633809876},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1756633809876},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1756633809876},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1756633809876},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1756633809876},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1756633809876},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1756633809877},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1756633809876},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1756633809876},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1756633809877},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1756633809878},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1756633809877},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1756633809879},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1756633809879},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1756633809876},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1756633809879},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1756633809877},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1756633809879},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1756633809879},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1756633809879},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1756633809892},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1756633809892},{"_id":"public/sitemap.xml","hash":"201e5b28bc3c45b2a0aca46b9effbbd0433657fe","modified":1756654186992},{"_id":"public/search.json","hash":"a322aee82d00515c9db746bdecd9a13946c02732","modified":1756654186992},{"_id":"public/about/index.html","hash":"0c79e8dba3f83cf1d06a0f5655b04ee48d16fb4e","modified":1756654186992},{"_id":"public/archives/index.html","hash":"0c8beaadaf40df4518a8e05f8c97fa587fa91a4e","modified":1756654186992},{"_id":"public/tags/index.html","hash":"8f3fb1bf781128a82a7e4a54c3352090421b554f","modified":1756654186992},{"_id":"public/schedule/index.html","hash":"3042e8b56d5a004a3ee90286434df8203a0313f8","modified":1756654186992},{"_id":"public/categories/index.html","hash":"af94f868c5ecc42c28eab07eb35eed1394fa87c6","modified":1756654186992},{"_id":"public/2025/08/31/c语言专题讲解/index.html","hash":"2d8d6aee8ea3434b9c3e69303e2f48c8d9987da2","modified":1756654186992},{"_id":"public/2025/08/30/hello-world/index.html","hash":"511f1d76d806a403ce08b522a5eb5ce8e2ab9f53","modified":1756654186992},{"_id":"public/archives/2025/index.html","hash":"1ada6c5e091338ef2d1a5a1c9cab7f471f643461","modified":1756654186992},{"_id":"public/archives/2025/08/index.html","hash":"c7181ffa74986662bbd1f012db30c52855306deb","modified":1756654186992},{"_id":"public/index.html","hash":"edab3b28425f8d52732a61d57a5513e8fc8ee612","modified":1756654186992},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1756654186992},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1756654186992},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1756654186992},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1756654186992},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1756654186992},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1756654186992},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1756654186992},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1756654186992},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1756654186992},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1756654186992},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1756654186992},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1756654186992},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1756654186992},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1756654186992},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1756654186992},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1756654186992},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1756654186992},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1756654186992},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1756654186992},{"_id":"public/css/main.css","hash":"c35e83b3e4036e227c2328439943266822569ed3","modified":1756654186992},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1756654186992},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1756654186992},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1756654186992},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1756654186992},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1756654186992},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1756654186992},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1756654186992},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1756654186992},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1756654186992}],"Category":[],"Data":[{"_id":"next","data":{"menu":{"home":"/ || fa fa-home","about":"/about/ || fa fa-user","tags":"/tags/ || fa fa-tags","categories":"/categories/ || fa fa-th","archives":"/archives/ || fa fa-archive"},"codeblock":{"copy_button":{"enable":true,"show_result":true}},"local_search":{"enable":true},"back2top":{"enable":true,"scrollpercent":true},"reading_progress":{"enable":true,"position":"top","color":"#37c6c0"},"font":{"enable":true,"global":{"external":true,"family":"Noto Sans SC"}},"pjax":true,"lazyload":true}}],"Page":[{"title":"相关","type":"about","date":"2025-08-31T14:38:43.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: 相关\ntype: \"about\"\ndate: 2025-08-31 22:38:43\n---\n","updated":"2025-08-31T14:39:56.636Z","path":"about/index.html","comments":1,"layout":"page","_id":"cmezujptp0000qk8ygt7l02ow","content":"","excerpt":"","more":""},{"title":"归档","type":"archives","date":"2025-08-31T14:38:46.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: 归档\ntype: \"archives\"\ndate: 2025-08-31 22:38:46\n---\n","updated":"2025-08-31T14:41:02.826Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cmezujptq0001qk8y6yaienfa","content":"","excerpt":"","more":""},{"title":"标签","type":"tags","date":"2025-08-31T14:38:44.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: \"tags\"\ndate: 2025-08-31 22:38:44\n---\n","updated":"2025-08-31T14:41:35.965Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmezujptq0002qk8y9i3bcob8","content":"","excerpt":"","more":""},{"title":"日程","type":"schedule","date":"2025-08-31T14:38:47.000Z","_content":"","source":"schedule/index.md","raw":"---\ntitle: 日程\ntype: \"schedule\"\ndate: 2025-08-31 22:38:47\n---\n","updated":"2025-08-31T14:41:24.248Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"cmezujptr0003qk8y0w7f365s","content":"","excerpt":"","more":""},{"title":"分类","type":"categories","date":"2025-08-31T14:38:45.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: \"categories\"\ndate: 2025-08-31 22:38:45\n---\n","updated":"2025-08-31T14:41:09.087Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmezujptr0004qk8ygj2ieg9x","content":"","excerpt":"","more":""}],"Post":[{"title":"c语言专题讲解","date":"2025-08-31T15:16:04.000Z","_content":"\n## 1. 指针的基础知识\n\n### 1.1 指针的基本语法\n\n与指针操作相关的运算符: 解引用运算符`*`, 取地址运算符`&`\n\n指针的基本使用方法 或者说 最基础的语法如下:\n```c\n//操作1\nint contianer = 0;\nint content = 1;\ncontianer = content;\n\n//操作2\nint * contianer = 0;\nint content = 1;\ncontianer = &content;\n\nprintf(\"contianer:%d\",*contianer);\nprintf(\"contianer:%d\",contianer);\nprintf(\"contianer:%x\",contianer);\n```\n对比以上两种操作\n\n指针用于存储地址, 通过地址可以找寻到该地址处的数据, 或者以该地址为起始地址的数据.\n\n### 1.2 指针的简单应用\n\n如何实现交换两个数的内容:\n```c\ninclude <stdio.h>\n\nint main(void)\n{\n\tchar a='B';//一个盒子里放着篮球\n\tchar b='A';//另一个盒子里放着足球\n\tchar temp='0';//有一个空盒子\n\n\t//使用一下三步完成交换\n\ttemp = a;//篮球放在空盒子里, 原本放篮球的盒子现在为空\n\ta = b;//足球放在空盒子里, 此时原本放足球的盒子是空 注意不是b = a;\n\tb = temp; //空盒子中放入篮球, 完成物体的交换\n\treturn 0;\n}\n```\n\n以上是基本的交换两个数的实现, 这样写完全没问题. 如果我有10000个这样的数需要交换, 不可能写一万遍代码吧? 很自然的想到, 使用函数, 把重复使用的代码提取成一个函数.\n\n那么如何写呢?\n```c\nvoid swap(char a, char b)\n{\n\tchar temp='0';\n\t//使用一下三步完成交换\n\ttemp = a;//篮球放在空盒子里, 原本放篮球的盒子现在为空\n\ta = b;//足球放在空盒子里, 此时原本放足球的盒子是空 注意不是b = a;\n\tb = temp; //空盒子中放入篮球, 完成物体的交换\n}\n```\n好了这个函数实现了\n\n接下来在主函数调用一下:\n```c\ninclude <stdio.h>\n\nvoid swap(char a, char b)\n{\n\tchar temp='0';\n\t//使用一下三步完成交换\n\ttemp = a;//篮球放在空盒子里, 原本放篮球的盒子现在为空\n\ta = b;//足球放在空盒子里, 此时原本放足球的盒子是空 注意不是b = a;\n\tb = temp; //空盒子中放入篮球, 完成物体的交换\n}\n\nint main(void)\n{\n\tchar a='B';//一个盒子里放着篮球\n\tchar b='A';//另一个盒子里放着足球\n\tchar temp='0';//有一个空盒子\n\n\t//使用一下三步完成交换\n\tswap(a,b);\n\n\t//把盒子里的球倒出来看看\n\tprintf(\"box a:%c box b:%c\\n\");\n\treturn 0;\n}\n```\n\n==在这里给出输出==\n\n可以看出输出不对, 盒子里的球并没有被交换\n\n为什么会这样?\n原因在与swap函数\n\n>[!NOTE] 函数的形式参数和实际参数\n>对于函数的参数：\n>在声明和定义时写在函数参数列表中的参数是形式上的参数, 起到占位置的作用, 所以叫形式参数, 简称形参.\n>\n>形参在你调用函数时告诉你这里应当填什么样的数据.\n>\n>在调用函数时, 写入到参数列表的参数才是实际用到的参数, 称为实际参数, 简称实参.\n\n在这里, 我们把两个参数传入其中, 只是在形参之间换来换去, 没有影响到实参.\n试想一下, swap这个机器, 伸出两只机械臂, 要求你把篮球和足球放上去, 于是你另外拿了两个球给它, 它把球左手倒右手一换, 对你手上两个的盒子和其中的内容却没有任何影响.\n\n请注意, 我们的要实现交换两个球的目的, 不只要关心这两个球之间的关系, 还要关心球与盒子之间的关系, 一共是四个元素而不是两个元素.\n\n那么有没有一种东西, 既可以操作盒子, 又可以操作盒子中的内容呢?\n\n你好, 有的, 兄弟, 有的! 看一下指针吧, 兄弟!\n指针本体可以操作盒子, 通过解引用操作可以操作盒子内的物品, 两个要求, 一次满足, 简直太完美了.\n\n于是就可以实现一个新的swap函数:\n```c\nvoid new_swap(char * a, char * b)\n{\n\tchar temp = '0';\n\n\ttemp = *a;\n\t*a = *b;\n\t*b = temp;\n}\n\n//由于参数是两个指针, 因此调用函数传入参数时要注意使用取地址运算符传入地址\nint main(void)\n{\n\tchar a='B';//一个盒子里放着篮球\n\tchar b='A';//另一个盒子里放着足球\n\tchar temp='0';//有一个空盒子\n\n\t//使用一下三步完成交换\n\tswap(&a,&b);\n\n\t//把盒子里的球倒出来看看\n\tprintf(\"box a:%c box b:%c\\n\");\n\treturn 0;\n}\n```\n\n## 2. 指针和内存空间\n\n### 2.1 不同类型数据占据的存储空间\n\n 为了合理的存储不同大小的数据, 既不浪费, 也不溢出, 有不同数据类型.\n 为了应对不同的数据类型, 指针也有了不同的类型. 但是指针的类型和数据类型有一些区别.\n\n我们知道, 不同数据类型的本质区别就是占据的空间大小不同.\n\n![image.png](https://fuyunyou-note.oss-cn-wuhan-lr.aliyuncs.com/typora-user-images/202502071351935.png)\n\n==(此处给出数据类型大小表格)==\n\n我们使用`sizeof()`运算符可以计算数据的大小, sizeof的用法类似函数(但它实际上不是参数而是运算符), 括号中传入参数, 返回一个数字(该返回值的类型为size_t) 表示传入的参数的占据空间大小, 以字节为单位.\n```c\nprintf(\"size of char:%d\",sizeof(char));\nprintf(\"size of short:%d\",sizeof(short));\nprintf(\"size of int:%d\",sizeof(int));\n```\n\n照这样来看数组应该根据存储数据类型的不同, 拥有不同的大小, 然而事实却不是这样. 一般来说, 指针拥有固定的大小.\n原因也很简单, 指针存储的是地址, 所有的地址都是同一类型的数据, 不论是char还是int, 都是地址. 所以占据的大小都是相同的.\n\n那么可以说所有的指针都是同一类型的数据吗?\n当然不能.\n虽然指针本身所占的空间大小相同, 但其中包含的地址所指向的数据本身却是不同的.\n\n```c\nchar * char_ptr;\nshort * short_ptr;\nint * int_ptr;\n```\n以上的数据声明中, 有`char *, short *, int *` 三种不同类型的数据, 可以这样理解, 其中的`*`(解引用运算符)表示这三者都是指针, 而char, short, int表示其中存储的数据的不同类型. 这两个方面的信息共同构成了指针的类型.\n当计算机根据指针中存储的地址找到所在位置之后, 通过声明指针变量是给出char, int或其他数据类型的信息决定取一个字节或四个字节的数据.\n\n> [!info] `void` 类型 和`void*` 类型\n> `void` 表示无类型，不能直接用来定义变量，如`void x=0;`这条语句是不合法的。用在函数头的返回值或参数列表中，表示函数无参或无返回值。如`void func(void)`，表示一个既无参数有无返回值的函数。\n>  `void*`表示无类型指针，可以用来定义变量，`void* ptr=&x;`该语句是合法的。`void*`是为了满足一些函数的适配性而设计的（即泛型编程），例如，设计一个函数`long sumof(int a,int b)`用于计算两个数之和，因为不能确定要计算的两个数的大小，如果给出的参数超出了`int`类型的限制就会产生意想不到的结果。将其修改为`void* sumof(void* a,void* b,DATA_TYPE type)`，不论数据有多大，先接受了再说，同时传入数据类型，根据数据类型，在函数中采用不同的处理方式即可。\n>\n>  为何`void`不可以直接用于定义变量而`void*`可以？\n>  `void*`归根到底是一个指针，用该类型定义变量编译器知道用多少内存来存储该变量，因为一台机器上的指针类型大小是固定的。而对于`void`类型的变量，编译器不知道该使用多大的内存来存储，因此无法直接定义变量。相应的，由于`void*`类型没有数据类型，因此不能直接对`void*`指针直接解引用，也不能直接使用`++`运算符。例如，语句`int a=0; void* ptr = &a; b=*ptr`和`void* ptr=&a; ptr++;`都是不合法的。\n\n### 2.2 寻址空间和指针大小\n\n我们知道指针的大小一般都是相同的，那么会是多大呢？可以使用`sizeof()`运算符测算\n```c\nint a=10;\nchar b='a';\nfloat c=1.1;\n\nint *ptr1=&a;\nchar *ptr2=&b;\nfloat *ptr3=&c;\n\nprintf(\"size of ptr1 = %d\\n\",sizeof(ptr1));\nprintf(\"size of ptr2 = %d\\n\",sizeof(ptr2));\nprintf(\"size of ptr3 = %d\\n\", sizeof(ptr3));\n\n//输出\nsize of ptr1 = 8\nsize of ptr2 = 8\nsize of ptr3 = 8\n```\n\n\n大部分情况下, 结果都会是8. 这表示指针类型占据8字节空间大小.\n\n指针占据的空间是由CPU的寻址位数所决定的,  CPU的寻址位数决定了其能够访问的内存地址的范围，也决定了指针变量能够存储的地址值的位数。例如，在32位机器上，地址是由32个0或1的二进制序列组成，因此指针大小通常是4个字节（因为1个字节=8比特位，32比特位=4个字节）。而在64位机器上，地址需要64个0或1的二进制序列组成，因此指针大小通常是8个字节。\n\n当然cpu寻址位数并不是唯一的决定因素, 编译器的编译方式, 虚拟化技术的使用等其他原因可能导致指针大小与实际的CPU不匹配.\n\ncpu的寻址位数, 另一种说法, 也就是cpu的地址总线宽度, 决定了系统的地址空间的大小.\n\n我们在一些软件的release版本中经常能看见x86和x64后缀.\n\nx86是一种32位处理器架构，它广泛被应用于早期的计算机系统中。由于历史原因和广泛的兼容性，许多旧的软件和操作系统仍然基于x86架构。x86架构的处理器能够支持的内存寻址范围为2^32（约4GB），这在一定程度上限制了其在处理大数据和复杂计算任务时的能力。然而，对于许多日常应用和旧版软件来说，x86架构仍然足够满足需求。\n\n相比之下，x64（也称为x86-64或AMD64）是一种64位处理器架构，它提供了更大的内存寻址范围和更高的计算能力。x64架构的处理器能够支持的内存寻址范围为2^64（实际限制通常为16EB，即160亿GB），这使得它能够轻松应对大数据处理和复杂计算任务。此外，x64架构还向下兼容32位应用程序，这意味着用户可以在64位操作系统上运行旧的32位软件。\n\n因此，当软件的release版本后缀带有x86或x64时，这表示该软件分别针对32位或64位的处理器架构进行了优化。用户应该根据自己的操作系统和硬件平台选择合适的版本进行安装。如果你的操作系统是64位的，并且你的计算机硬件支持x64架构，那么建议选择x64版本的软件以获得更好的性能和兼容性。如果你的操作系统或硬件平台是32位的，或者你需要运行一些只能在32位环境下运行的旧版软件，那么你可能需要选择x86版本的软件。\n\n==(推书) 汇编语言--王爽==\n### 2.3 数据的存储方式\n\n#### 2.3.1 问题的引入\n```c\nint int_data=0x12345678;\nchar * char_ptr=NULL;\n\nchar_ptr = (char *)(&int_data);\nprintf(\"0x%x\",*char_ptr);\n```\n以上示例输出内容是什么?\n\n在不同的平台上,  输出内容会有差别, 大部分人在PC上应该输出的是0x78, 而在一些特定平台, 则会输出0x12.\n\n原因是什么?\n\n先看看以上操作在干嘛,  定义一个`int`类型的变量, 取这个变量的地址, 强制类型转换成`char*`类型的指针, 并通过指针来访问该地址的内容.\n\n还记得我说的指针的类型的含义吗, `char *` 表示在数组存储的地址上访问`sizeof(char)` 大小的字节数目(1个字节), `int *`表示在数组存储的地址上访问`sizeof(int)` 大小的字节数目(一般为4个字节).\n\n也就是说, 原本的四字节大小的int_data通过这种访问方式被截断为一个字节\n\n在定义时, int_data被赋值为`0x12345678`, 其中`0x`表示其后的数据是16进制格式, 也就是说, 刚巧12,34,56,78分别各是一个字节\n0x12=0b 0001 0010 , 其他字节内容类似.\n\n接下来就是最关键的问题: 在四个字节的内容被裁剪为一个字节的情况下, 哪个字节会被返回?\n\n#### 2.3.2 字节序和存储模式\n\n从直觉来看, 最开始的12和最末尾的78应该是最有可能的, 结果也是符合直觉的.\n\n再来看一看这个数: 12 34 56 78.\n我们读这个数是从12开始, 而这个数的最低位是78, 如果把这个数看成10进制,则 8是个位, 7是十位, 虽然16进制没有个位十位的说法, 但是原理是类似的, 8是最低位, 7是次低位.\n78是最低字节(LSB, least significant byte), 相应的, 12是最高字节(MSB, most significant byte). 字节的高低称作字节序\n\n不论一个数是按照十进制还是十六进制, 或是二进制, 八进制等等, 数字总有其排列顺序.\n\n数中的字节讲顺序, 计算机里的存储也讲顺序, 计算机内存按照地址进行编号, 从0开始到虚拟地址空间的最大值, 依次增加, 数据依次存储在其中. 0x1000是低地址, 0x1003是高地址\n\n根据字节序的存储地址不同, 可以分为两种存储模式\n\n1. **大端存储**：在大端存储模式下，数据的高字节（或称作高位、最重要字节）被存储在内存的低地址处，而数据的低字节（或称作低位、最不重要字节）存储在高地址处。这意味着当你从低地址向高地址读取内存时，数据会按照从高到低的顺序出现。例如，对于十六进制数0x1234，在大端模式下，内存中的布局就是0x12在前（低地址），0x34在后（高地址）。\n2. **小端存储**：在小端存储模式下，数据的低字节存储在内存的低地址处，而高字节存储在高地址处。也就是说，当你从低地址开始读取时，最先读到的是数据的低字节，然后才是高字节。对于相同的十六进制数0x1234，在小端模式下，内存布局会是0x34在前（低地址），0x12在后（高地址）。\n\n于是, 对于0x12345678\n1. **在大端存储模式下**：\n    - `int_data`的内存布局（从低地址到高地址）将是：`0x12`, `0x34`, `0x56`, `0x78`。\n    - `char_ptr`指向`int_data`的第一个字节，即`0x12`。\n    - 因此，`printf(\"%x\", *char_ptr);`将输出`12`。\n2. **在小端存储模式下**：\n    - `int_data`的内存布局（从低地址到高地址）将是：`0x78`, `0x56`, `0x34`, `0x12`。\n    - `char_ptr`指向`int_data`的第一个字节，即`0x78`。\n    - 因此，`printf(\"%x\", *char_ptr);`将输出`78`。\n\n因此，该代码在大端存储模式下输出`12`，在小端存储模式下输出`78`。\n\n[[C语言指针系列图解.excalidraw]]\n\n使用以下方式可以判断机器是那种存储方式?\n```c\n#include <stdio.h>\n\nint main() {\n    int num = 1;\n    if (*(char *)&num == 1) {\n        printf(\"Little-endian\\n\");\n    } else {\n        printf(\"Big-endian\\n\");\n    }\n    return 0;\n}\n```\n\n>[!note] 注意\n>你应当注意到了, 不论指针所指向的数据占据的内存空间有多大, 它总是指向数据占据的最低地址, 这一点在数组中也是适用的, 具体会在接下来的`3.指针与数组`部分详解.\n## 3. 指针和数组\n\n### 3.1 使用指针操作数组\n\n数组被用来存储一系列相同类型的数据\n\n```c\nint a[10]={1,2,3,4,5,6,7,8,9,10};\n```\n对于数组的基本用法这里不多赘述, 如果不了解建议补充一下基础知识.\n\n我们知道, 数组通过数组下标取数\n```c\nint x=a[0];\n```\n取数组的第一个元素赋值给变量x.\n\n然而还有另一种用法, 数组名是一个相应类型的指针.\n\n以上例子中, `a`可以直接赋值给`int *`类型的指针使用，且是一个合法地址。该地址是数组第一个元素的地址。\n```c\nint * int_ptr=a;\n```\n以上写法, 编译既不会报错, 也不会警告. 是合法合规而且经常使用的写法.\n\n于是, 对于数组的元素的访问, 可以有两种不同的方式完成.\n```c\nint a[10]={1,2,3,4,5,6,7,8,9,10};\nint data1=a[0];//访问第一个数组元素\nint data2=*(a+1);//访问第一个数组元素之后的一个元素\n\nprintf(\"data1:%d\",data1);\nprintf(\"data2:%d\",data2);\n\n//输出:\ndata1:1\ndata2:2\n```\n\n### 指针运算\n以上代码涉及到一个新的操作：指针运算\n仔细观察其中的写法,：`*(a+1)`, 表示a增加“1”, 然后解引用。\n\n一般来说, “加1”操作是直接作用在数值上的，加上1就是数值变大1，但是对于指针来说, 这个`1`不是大小上的1, 而是单位`1`.\n这里的单位1为指针存储的类型所占的字节数。\n\n之前讲解过, 对于`char *`,`int*`等不同类型的指针的含义:\n\n\"`char *` 表示在数组存储的地址上访问`sizeof(char)` 大小的字节数目(1个字节), `int *`表示在数组存储的地址上访问`sizeof(int)` 大小的字节数目(一般为4个字节)\"\n\n对于`char *`类型的数据, 自增以`char`类型的大小为单位1, 其值就是1个字节.\n假设`char * char_ptr=0x1000` 那么`char_ptr+1`后, 其值为`0x1001`. 而如果是`int_ptr+1`, 其值为`0x1004`. 其他类型与此相似.\n\n==(在这里给出数组数据在内存中的排列)==\n[[C语言指针系列图解.excalidraw]]\n\n指针运算的这种设计极好的契合了数组操作, 数组各个元素可以直接依照自增取数.\n\n```c\n\tint a[10]={1,2,3,4,5,6,7,8,9,10};\n    for(int i=0;i<10;i++)\n    {\n        printf(\"%d\\n\",*(a+i));\n        printf(\"%d\\n\",a[i]);\n    }\n```\n\n以上两种写法都能遍历数组\n\n>[!error] 数组名和指针的区别\n>看了以上的内容，你可能会认为数组名就是一个指向数组首元素地址的指针，并完全把它当作指针来使用。但数组名不是一个指针，和不能混为一谈。请看如下示例：\n>```c\n>int arr[5]={1,2,3,4,5};\n>int a=*(arr++);\n>//报错：error: lvalue required as increment operand\n>```\n>以上代码中`arr++`操作是不合法的，编译报错的意思是说`++`运算符需要一个左值作为其操作数，虽然数组名是一个左值，但不是一个可以修改的左值。这样是有原因的，数组名作为一个数组的标识（symbol）应该永远指向数组的首地址，不应被任何操作更改，这样才能保证对数组任意元素的正常访问。\n>那么为什么`arr+1`这样的操作是合法的？\n>原因是”+1“操作不会改变arr本身的值，arr+1这样的表达式最终的结果是一个右值，终究是要赋值给某个变量或作为其他运算符的操作数使用。无论是哪种情况，都不会影响arr中存储的值。\n\n\n### 3.2 数组到指针的退化\n\n\n在 C/C++ 中，​**数组到指针的退化（array-to-pointer decay）​**​ 是一个重要的隐式转换机制，它决定了数组名在大多数情况下如何被自动转换为指针。理解这个概念对掌握 C/C++ 的指针和数组操作至关重要。\n\n---\n\n#### ​**1. 什么是数组到指针的退化？​**​\n\n- ​**数组名 `arr` 在大多数表达式中会自动转换为指向其首元素的指针**。\n- 这种转换是隐式的（编译器自动完成），称为 ​**​\"退化（decay）\"​**。\n- 退化后，数组名 `arr` 不再代表整个数组，而是变成一个指向 `arr[0]` 的指针（类型 `T*`，其中 `T` 是数组元素的类型）。\n\n​**示例**​\n\n```c\nint arr[5] = {1, 2, 3, 4, 5};\nint *p = arr;  // 数组名 arr 退化为 int* 指针\n```\n\n- `arr` 原本是一个 `int[5]` 类型的数组，但在赋值给 `p` 时，它退化为 `int*` 类型（指向 `arr[0]`）。\n\n---\n\n#### ​**2. 何时发生数组到指针的退化？​**​\n\n数组名在以下情况下会退化为指针：\n\n1. ​**作为函数参数传递时**​：\n\n    ```c\n    void func(int *p);  // 函数接受指针\n    int arr[5] = {1, 2, 3, 4, 5};\n    func(arr);  // arr 退化为 int* 指针\n    ```\n\n    - 即使函数声明为 `void func(int p[5])`，`p` 仍然会被当作 `int*` 处理（数组语法只是语法糖）。\n2. ​**在算术运算（`+`, `-`, `++`, `--`）中**​：\n\n    ```c\n    int *p = arr + 1;  // arr 退化为指针，然后 +1 运算\n    ```\n\n3. ​**在 `[]` 运算符中**​：\n\n    ```c\n    int val = arr[2];  // 等价于 *(arr + 2)\n    ```\n\n4. ​**在比较运算 （ `!=`, `<`, `>` 等）中**​：\n\n    ```c\n    if (arr == NULL) { ... }  // arr 退化为指针\n    ```\n\n5. ​**在初始化指针时**​：\n\n    ```c\n    int *p = arr;  // arr 退化为指针\n    ```\n\n\n---\n\n#### ​**3. 何时不会发生退化？​**​\n\n数组名在以下情况下**不会退化为指针**，仍然保持数组类型：\n\n1. ​**`sizeof(arr)`**​：\n\n    ```c\n    size_t size = sizeof(arr);  // 返回整个数组的大小（5 * sizeof(int)）\n    ```\n\n    - 如果 `arr` 退化为指针，`sizeof(arr)` 会返回指针的大小（如 4 或 8 字节），而不是数组大小。\n2. ​**`&arr`（取数组地址）​**​：\n\n    ```c\n    int (*ptr_to_array)[5] = &arr;  // 返回 int(*)[5] 类型（数组指针）\n    ```\n\n    - `&arr` 返回的是**指向整个数组的指针**​（`int(*)[5]`），而不是指向首元素的指针（`int*`）。\n3. ​**字符串字面量初始化字符数组时**​：\n\n    ```c\n    char str[] = \"hello\";  // str 是数组，不会退化为指针\n    ```\n\n\n---\n\n#### ​**4. 退化后的指针类型**​\n\n- 如果 `arr` 是 `T[N]` 类型（`T` 是元素类型，`N` 是数组大小），则退化后的指针类型是 `T*`。\n- ​**示例**​：\n\n    ```c\n    int arr[5];     // 类型是 int[5]\n    int *p = arr;   // 退化后 p 的类型是 int*\n    ```\n\n\n---\n\n#### ​**5. 退化与指针算术**​\n\n由于退化后的 `arr` 变成 `T*`，我们可以对它进行指针算术运算：\n\n```c\nint arr[5] = {1, 2, 3, 4, 5};\nint *p = arr;     // p 指向 arr[0]\nint *q = p + 3;   // q 指向 arr[3]（即 4）\n```\n\n- `arr + i` 等价于 `&arr[0] + i`，计算的是第 `i` 个元素的地址。\n\n---\n\n#### ​**6. 退化与多维数组**​\n\n对于多维数组，退化规则仍然适用，但会逐层退化：\n\n```c\nint matrix[3][4];  // int[3][4] 类型\n```\n\n- ​**`matrix` 退化为 `int(*)[4]`**​（指向 `int[4]` 的指针）。\n- ​**`matrix[0]` 退化为 `int*`**​（指向 `int` 的指针）。\n\n ​**示例**​\n\n```c\nint (*p)[4] = matrix;  // p 指向 matrix[0]（int[4] 类型）\nint *q = matrix[0];    // q 指向 matrix[0][0]（int 类型）\n```\n\n---\n\n#### ​**7. 退化带来的问题**​\n\n由于退化是隐式的，可能会导致一些意外的行为：\n\n ​**​(1) 数组大小信息丢失**​\n\n```c\nvoid func(int *p) {\n    // 无法知道 p 指向的数组有多大！\n}\n\nint arr[5] = {1, 2, 3, 4, 5};\nfunc(arr);  // 退化后，func 不知道 arr 的大小\n```\n\n- ​**解决方案**​：显式传递数组大小：\n\n    ```c\n    void func(int *p, size_t size);\n    func(arr, sizeof(arr)/sizeof(int));\n    ```\n\n\n ​**​(2) 不能对退化后的指针使用 `sizeof`**​\n\n```c\nint arr[5];\nint *p = arr;\nsize_t s1 = sizeof(arr);  // 20（假设 int 是 4 字节）\nsize_t s2 = sizeof(p);    // 4 或 8（指针的大小）\n```\n\n- `sizeof(arr)` 返回整个数组的大小，但 `sizeof(p)` 返回指针的大小。\n\n---\n\n#### ​**8. 如何避免退化？​**​\n\n如果希望保留数组类型（防止退化），可以使用：\n\n1. ​**引用传递（C++）​**​：\n\n    ```c\n    void func(int (&arr)[5]);  // 接受 int[5] 类型的引用\n    int arr[5] = {1, 2, 3, 4, 5};\n    func(arr);  // 不会退化\n    ```\n\n    - 这样 `sizeof(arr)` 在函数内部仍然有效。\n2. ​**使用 `std::array`（C++）​**​：\n\n    ```c\n    #include <array>\n    std::array<int, 5> arr = {1, 2, 3, 4, 5};\n    ```\n\n    - `std::array` 是 C++ 的容器，不会退化。\n\n---\n\n#### ​**9. 总结**​\n\n|​**关键点**​|​**说明**​|\n|---|---|\n|​**什么是退化？​**​|数组名 `arr` 在大多数情况下隐式转换为 `&arr[0]`（指针）。|\n|​**何时发生？​**​|函数传参、指针运算、`[]` 操作、比较运算等。|\n|​**何时不发生？​**​|`sizeof(arr)`, `&arr`, 初始化字符数组时。|\n|​**退化后的类型**​|`T[N]` → `T*`（指向首元素的指针）。|\n|​**多维数组退化**​|`int[3][4]` → `int(*)[4]`（指向行的指针）。|\n|​**退化的问题**​|丢失数组大小信息，`sizeof` 行为不同。|\n|​**如何避免？​**​|使用引用（C++）或 `std::array`（C++）。|\n\n理解 ​**array-to-pointer decay**​ 能帮助你更好地掌握 C/C++ 的数组和指针操作，避免常见的陷阱！ 🚀\n\n### 3.3 在数组中使用sizeof()\n\n有如下代码示例，尝试运行，看看结果和你想的是否相同:\n```c\nint arr[5] = {1, 2, 3, 4, 5};\nint *ptr=arr;\n\nprintf(\"size of arr:%d\",sizeof(arr));\nprintf(\"size of ptr:%d\",sizeof(ptr));\n```\n\n\n继续来看遍历数组的例子\n\n```c\n\tint a[]={2,3,4,2,35,624,546,31,0,46};\n\tint arr_size=10;\n    for(int i=0;i<arr_size;i++)\n    {\n        printf(\"%d\\n\",*(a+i));\n        printf(\"%d\\n\",a[i]);\n    }\n```\n\n遍历数组是, for循环的终止条件是数组的长度.\n直接在循环中写出数组长度的数字是一种不推荐的写法, 有几个缺点:\n\n1. 对于明确给出长度的数组, 我们可以直接知道它的长度, 但对于没有给出长度的数组, 不能一眼看出它的长度.\n2. 直接在for循环中使用数组长度的数字,  是一种硬编码方式, 如果要改动数组大小, 那么每一个在程序中用到的数组遍历操作都要更改代码, 非常麻烦.\n\n更推荐使用的方法是使用sizeof()运算符:\n具体操作如下:\n`arr_size = sizeof(arr_name)/sizeof(data_type)`\n\n`sizeof(arr_name)`计算数组的所有元素占据的字节数, `sizeof(data_type)`计算数组每个元素占据的字节数. 两个数一除, 就能算出数组大小.\n\n```c\n//使用以上方法遍历数组\n\tint a[]={2,3,4,2,35,624,546,31,0,46};\n    for(int i=0;i<sizeof(a)/sizeof(int);i++)\n    {\n        printf(\"%d\\n\",*(a+i));\n        printf(\"%d\\n\",a[i]);\n    }\n```\n\n\n#### sizeof和strlen的区别\n\n在以上示例中提到了数组的一个用法: 即使用字符数组存储字符串. 对于这样的字符串既可以使用sizeof()获取其长度, 也可以使用strlen()\n来看一下sizeof和strlen的区别:\n\n#### 1. 定义与性质\n\n1. **sizeof**\n\n    - 性质：是C/C++中的一个运算符，用于计算变量或数据类型所占的内存大小。\n    - 返回值：其返回值是size_t类型，表示某种类型或对象的字节数。\n    - 计算时机：sizeof是在编译时计算的，而不是运行时，这使得它非常高效。\n2. **strlen**\n\n    - 性质：是C语言标准库中的一个函数，用于计算字符串的长度。\n    - 语法：`size_t strlen(const char *str);`\n    - 参数：str表示要计算长度的字符串，以'\\0'结尾的字符指针。\n    - 返回值：返回字符串str的字符数量，不包含'\\0'结尾字符。\n    - 计算时机：strlen的结果是在运行时计算出来的。\n\n#### 2. 使用场景与限制\n\n1. **sizeof**\n\n    - 可以用于数据类型、变量、数组、结构体等，返回它们在内存中的大小，单位是字节。\n    - 对于数组，sizeof可以直接给出数组所占用的内存大小。但需要注意，当数组作为函数参数传递时，它会被退化为指针，此时使用sizeof来计算数组的大小将返回指针的大小，而不是数组的实际大小。\n    - 对于指针，sizeof返回的是指针本身的大小，而不是它所指向的内容的大小。\n2. **strlen**\n\n    - 只能用于计算以'\\0'结尾的字符串的长度。\n    - 如果字符串没有以'\\0'结尾，strlen的行为是未定义的，可能会继续计算直到遇到内存中的某个'\\0'字符为止。\n    - strlen的参数必须是char*类型的指针，不能用于其他数据类型。\n\n#### 3. 示例对比\n\n以下是一个简单的示例，用于说明sizeof和strlen在实际编程中的使用：\n\n```c\n#include <stdio.h>\n#include <string.h>\n\nint main()\n{\n\tchar str[] = \"Hello, World!\";\n\tchar *ptr = str;\n\tprintf(\"Sizeof str: %zu bytes\\n\", sizeof(str));  // 输出数组的大小，包括结尾的'\\0'\n\tprintf(\"Sizeof ptr: %zu bytes\\n\", sizeof(ptr));  // 输出指针的大小\n\tprintf(\"Strlen of str: %zu\\n\", strlen(str));     // 输出字符串的长度，不包括结尾的'\\0'\n\treturn 0;\n}\n```\n\n在这个示例中，`sizeof(str)`返回的是数组`str`所占用的内存大小，包括结尾的'\\0'字符；而`sizeof(ptr)`返回的是指针`ptr`本身所占用的内存大小，与它所指向的字符串的长度无关。`strlen(str)`则返回的是字符串`str`的长度，不包括结尾的'\\0'字符。\n\n\n## 4. 指针和结构体\n\n### 4.1 基本用法\n\n使用结构体可以把相关的数据有逻辑的组合在一起, 并通过`结构体名称+ .`来引用结构体中的变量\n\n```c\n#include <stdio.h>\n#include <string.h> // 包含strcpy函数的头文件\n\nstruct Student {\n    int id;         // 学生学号\n    char name[50];  // 学生姓名\n    float score;    // 学生成绩\n};\n\nint main()\n{\n\tstruct Student stu;//创建一个Student类型的数据stu\n\tstu.id=1;\n\tstrcpy(stu.name, \"zhangsan\"); // 使用strcpy函数复制字符串\n\tstu.score=85.0;\n}\n```\n可以看出结构体和数组是很像的, 都是用来存储一系列数据的. 二者的区别在于同一结构体中可以包含不同数据类型的数据, 而一个数组中所有数据的数据类型都相同\n结构体中也可以包含数组作为其元素, 如上所示, `char name[50]`是用于存储学生姓名的数组.\n\n**通过typedef为结构体起一个别名**\n```c\n//使用typedef定义一个结构体,为其起一个别名\n\n//写法1:\ntypedef struct Student\n{\n    int id;        // 学生学号\n    char name[50]; // 学生姓名\n    float score;   // 学生成绩\n} Stu;\n\n/*\n起别名后可以一直使用别名,于是结构体原本的名字可以省略掉\n写法2:\ntypedef struct\n{\n    int id;        // 学生学号\n    char name[50]; // 学生姓名\n    float score;   // 学生成绩\n} Stu;\n*/\n\n//以上两种写法是一样的\nint main()\n{\n    Stu stu; // 创建一个Stu类型的数据stu.因为起了别名,此处可以直接使用别名\n    stu.id = 1;\n    strcpy(stu.name, \"zhangsan\"); // 使用strcpy函数复制字符串\n    stu.score = 85.0;\n}\n```\n\n### 4.2 使用指针操作结构体\n\n结构体同样可以通过指针来操作\n\n```c\n//使用typedef定义一个结构体,为其起一个别名\ntypedef struct Student\n{\n    int id;        // 学生学号\n    char name[50]; // 学生姓名\n    float score;   // 学生成绩\n} Stu;\n\nint main()\n{\n    Stu stu; // 创建一个Stu类型的数据stu.因为起了别名,此处可以直接使用别名\n    stu.id = 1;\n    strcpy(stu.name, \"zhangsan\"); // 使用strcpy函数复制字符串\n    stu.score = 85.0;\n\n    Stu* ptr_stu;// 创建一个指向Stu类型的指针ptr_stu\n    ptr_stu->id = 1;\n    strcpy(ptr_stu->name, \"zhangsan\"); // 使用strcpy函数复制字符串\n    ptr_stu->score = 85.0;\n}\n```\n使用指针同样可以操作结构体成员, 使用`指针名+ ->`运算符即可.\n\n既然涉及到了指针操作, 那么来看一看结构体在内存中的存储方式吧\n\n---\n\n#### **1. 结构体的存储方式**\n\n结构体在内存中的存储方式是按照其成员变量的声明顺序依次存储的。每个成员变量占用的内存空间取决于其数据类型。例如：\n\n```c\nstruct Example {\n    char a;    // 1字节\n    int b;     // 4字节\n    short c;   // 2字节\n};\n```\n\n在没有考虑对齐的情况下，结构体的内存布局大致如下：\n\n- `char a` 占用1字节。\n\n- `int b` 占用4字节。\n\n- `short c` 占用2字节。\n\n\n因此，结构体的总大小应该是 `1 + 4 + 2 = 7` 字节。然而，实际的存储方式会受到对齐规则的影响。\n\n---\n\n#### **2. 结构体的对齐方式**\n\n为了提高内存访问效率，编译器通常会对结构体的成员变量进行对齐（alignment）。对齐规则确保每个成员变量的地址是其大小的整数倍。例如，一个4字节的`int`变量，其地址必须是4的倍数。\n\n##### **2.1 对齐规则**\n\n1. **成员变量对齐**：\n\n    - 每个成员变量的起始地址必须是其自身大小的整数倍。例如：\n\n        - `char` 类型的变量对齐要求是1字节对齐。\n\n        - `short` 类型的变量对齐要求是2字节对齐。\n\n        - `int` 类型的变量对齐要求是4字节对齐。\n\n        - `long long` 类型的变量对齐要求是8字节对齐。\n\n    - 如果成员变量的起始地址不符合对齐要求，编译器会在前面插入填充字节（padding）。\n\n2. **结构体整体对齐**：\n\n    - 结构体的总大小必须是其最大成员变量对齐要求的整数倍。例如，如果结构体中最大的成员变量是4字节对齐的，那么整个结构体的大小必须是4的倍数。\n\n    - 如果结构体的总大小不符合对齐要求，编译器会在结构体的末尾插入填充字节。\n\n\n---\n\n#### **3. 示例分析**\n\n以之前的结构体为例：\n\n```c\nstruct Example {\n    char a;    // 1字节\n    int b;     // 4字节\n    short c;   // 2字节\n};\n```\n\n假设系统的默认对齐规则如下：\n\n- `char`：1字节对齐\n\n- `int`：4字节对齐\n\n- `short`：2字节对齐\n\n\n##### **3.1 成员变量对齐**\n\n1. **`char a`**：\n\n    - 起始地址：0\n\n    - 占用1字节，对齐要求是1字节对齐，因此不需要填充。\n\n2. **`int b`**：\n\n    - 起始地址：4（下一个4字节对齐的地址）\n\n    - 占用4字节，对齐要求是4字节对齐。\n\n    - 在`char a`和`int b`之间插入3个填充字节。\n\n3. **`short c`**：\n\n    - 起始地址：8（下一个2字节对齐的地址）\n\n    - 占用2字节，对齐要求是2字节对齐。\n\n\n##### **3.2 结构体整体对齐**\n\n- 结构体的总大小：`1（char）+ 3（填充）+ 4（int）+ 2（short）= 10` 字节。\n\n- 结构体中最大的成员变量是`int`，对齐要求是4字节。\n\n- 因此，结构体的总大小必须是4的倍数。\n\n- 在结构体的末尾插入2个填充字节，使得总大小为12字节。\n\n\n最终，结构体在内存中的布局如下：\n\n[[C语言指针系列图解.excalidraw]]\n\n| 地址  | 数据        | 说明        |\n| --- | --------- | --------- |\n| 0   | `char a`  | 成员变量      |\n| 1   | 填充字节      | 对齐`int b` |\n| 2   | 填充字节      | 对齐`int b` |\n| 3   | 填充字节      | 对齐`int b` |\n| 4   | `int b`   | 成员变量      |\n| 8   | `short c` | 成员变量      |\n| 10  | 填充字节      | 对齐结构体     |\n| 11  | 填充字节      | 对齐结构体     |\n\n结构体的总大小为12字节。\n\n值得注意的是, 改变结构体成员变量的顺序, 结构体大小也会随之改变\n```c\n//该结构体占据12字节\ntypedef struct {\n    char a;\n    int b;\n    short c;\n} Test;\n\n//该结构体占据8字节\ntypedef struct {\n    char a;\n    short c;\n    int b;\n} Test;\n\n```\n\n---\n\n#### **4. 修改对齐方式**\n\nC语言允许通过编译器的特定指令或属性来修改结构体的对齐方式。例如，在GCC编译器中，可以使用`__attribute__((packed))`来禁用填充字节：\n\n```c\n#include <stdio.h>\n\n//尝试把attribute__((packed))删除，看看输出结果\ntypedef struct {\n    char a;\n    int b;\n    short c;\n} __attribute__((packed)) Test;\n\nint main(void)\n{\n    Test test;\n    test.a = 0x12;\n    test.b = 0x12345678;\n    test.c = 0x1234;\n\n    char *ptr = (char *)&test;\n   \n    for(int i = 0; i < sizeof(Test); i++)\n    {\n        printf(\"%02x\\n\", *(ptr + i));\n    }\n}\n```\n\n在这种情况下，结构体的总大小为7字节，成员变量之间没有填充字节。\n\n\n---\n\n#### **5. 对齐方式的意义**\n\n1. **提高访问效率**：\n\n    - 对齐的内存访问通常比非对齐访问更快，因为硬件对对齐的内存访问进行了优化。\n\n    - 非对齐访问可能会导致额外的内存读取操作，降低性能。\n\n2. **跨平台兼容性**：\n\n    - 不同的硬件平台可能有不同的对齐要求。通过明确指定对齐方式，可以确保结构体在不同平台上具有一致的内存布局。\n\n3. **节省空间**：\n\n    - 在某些情况下，禁用对齐（如使用`packed`属性）可以节省内存空间，但这可能会牺牲访问效率。\n\n\n---\n\n#### **6. 总结**\n\nC语言结构体的存储方式是按照成员变量的声明顺序依次存储的，但实际的内存布局会受到对齐规则的影响。对齐规则确保每个成员变量的地址是其自身大小的整数倍，并且结构体的总大小是其最大成员变量对齐要求的整数倍。通过理解结构体的对齐方式，可以更好地优化内存使用和提高程序性能。\n\n了解了结构体的存储方式和对齐方式, 可以使用指针自增的方式访问结构体, 偏移合适的大小, 避开填充字节获取有效的信息, 或者直接禁用填充字节.\n不过, 并不推荐使用指针自增这种方式访问, 指针类型是固定的, 取出来的数据也是按照指针类型取出, 但结构体中的数据却不全是同一类型, 用这种方法取数非常麻烦. 直接使用`指针名 + ->`运算符, 简单且直观.\n\n### 4.3 数组和结构体相互转换\n\n禁用填充字节的结构体与数组直接可以直接相互转化, 不会出现问题.\n```c\n#include <stdio.h>\n\ntypedef struct {\n    char a;\n    int b;\n}\n//解除注释看一看\n// __attribute__((packed))\nTest;\n\nint main(void)\n{\n    char arr[5]={0x12,0x12,0x34,0x56,0x78};\n    Test* ptr_test=(Test*)arr;\n\n    printf(\"%x\\n\",ptr_test->a);\n    printf(\"%x\\n\",ptr_test->b);\n}\n```\n\n对于结构体和数组相互转化, 试看如下的应用\n如下是[某品牌激光雷达开发手册](D:\\work\\ToF_radar\\LDROBOT_STL-27L_Development_Manual_CN_v0.2.pdf), 其中`3.1节 数据包格式`中描述了雷达向控制器(计算机)传输的数据包的格式, 并给出了数据结构定义.\n\n如何将[原始数据包](D:\\work\\ToF_radar\\数据包结构.txt)转化为结构体?\n\n首先使用数组作为接收缓冲区, 数组大小等于两个数据包大小, 数据类型为uint8_t, 也就是char\n\n```c\n#define PACKET_SIZE 47\n\ntypedef struct {\n    uint8_t header;//数据包头,固定为0x54\n    uint8_t packet_length;//数据包长度,固定为0x2c\n    uint16_t speed;//雷达旋转速度\n    uint16_t start_angle;//该数据包的起始角度\n    LidarPointStructDef point[POINT_PER_PACKET];//激光点数据,每个数据包包含12个激光点\n    uint16_t end_angle;//该数据包的结束角度\n    uint16_t timestamp;//时间戳\n    uint8_t crc8;//CRC校验码\n} __attribute__((packed)) LidarPacket;\n\n//接收数据包的函数\nvoid Recieve_LidarPacket(uint8_t * rx_buffer)\n{\n//具体实现不必关心\n}\n\nuint8_t rx_buffer[PACKET_SIZE];\n\nRecieve_LidarPacket(rx_buffer);//调用接收函数接收数据包,调用完成后rx_buffer就装了一个数据包长度的数据了,而且第一个数组元素就是数据包头\n\nLidarPacket* pLidarPacketStruct=(LidarPacket*)rx_buffer;//将uint8*类型的数组直接转化为LidarPacket*,由于LidarPacket被定义为禁用填充字节的模式,后续的所有元素都会按照顺序一一对应\n\nprintf(\"0x%2x\",pLidarPacketStruct->header);//可以直接使用指针访问对应元素,不会出现偏差\n\n```\n\n事实上, 对于任何拥有严格结构限制的数据, 禁用填充字节使用结构体接收, 是一种常见的应用. 如接收通讯协议数据, 接收特定文件格式. 同时也保证代码的可移植性,节省内存空间. 相应的劣势是访问结构体的时间会增加.\n\n## 5. 函数指针\n待续...","source":"_posts/c语言专题讲解.md","raw":"---\ntitle: c语言专题讲解\ndate: 2025-08-31 23:16:04\ntags:\n---\n\n## 1. 指针的基础知识\n\n### 1.1 指针的基本语法\n\n与指针操作相关的运算符: 解引用运算符`*`, 取地址运算符`&`\n\n指针的基本使用方法 或者说 最基础的语法如下:\n```c\n//操作1\nint contianer = 0;\nint content = 1;\ncontianer = content;\n\n//操作2\nint * contianer = 0;\nint content = 1;\ncontianer = &content;\n\nprintf(\"contianer:%d\",*contianer);\nprintf(\"contianer:%d\",contianer);\nprintf(\"contianer:%x\",contianer);\n```\n对比以上两种操作\n\n指针用于存储地址, 通过地址可以找寻到该地址处的数据, 或者以该地址为起始地址的数据.\n\n### 1.2 指针的简单应用\n\n如何实现交换两个数的内容:\n```c\ninclude <stdio.h>\n\nint main(void)\n{\n\tchar a='B';//一个盒子里放着篮球\n\tchar b='A';//另一个盒子里放着足球\n\tchar temp='0';//有一个空盒子\n\n\t//使用一下三步完成交换\n\ttemp = a;//篮球放在空盒子里, 原本放篮球的盒子现在为空\n\ta = b;//足球放在空盒子里, 此时原本放足球的盒子是空 注意不是b = a;\n\tb = temp; //空盒子中放入篮球, 完成物体的交换\n\treturn 0;\n}\n```\n\n以上是基本的交换两个数的实现, 这样写完全没问题. 如果我有10000个这样的数需要交换, 不可能写一万遍代码吧? 很自然的想到, 使用函数, 把重复使用的代码提取成一个函数.\n\n那么如何写呢?\n```c\nvoid swap(char a, char b)\n{\n\tchar temp='0';\n\t//使用一下三步完成交换\n\ttemp = a;//篮球放在空盒子里, 原本放篮球的盒子现在为空\n\ta = b;//足球放在空盒子里, 此时原本放足球的盒子是空 注意不是b = a;\n\tb = temp; //空盒子中放入篮球, 完成物体的交换\n}\n```\n好了这个函数实现了\n\n接下来在主函数调用一下:\n```c\ninclude <stdio.h>\n\nvoid swap(char a, char b)\n{\n\tchar temp='0';\n\t//使用一下三步完成交换\n\ttemp = a;//篮球放在空盒子里, 原本放篮球的盒子现在为空\n\ta = b;//足球放在空盒子里, 此时原本放足球的盒子是空 注意不是b = a;\n\tb = temp; //空盒子中放入篮球, 完成物体的交换\n}\n\nint main(void)\n{\n\tchar a='B';//一个盒子里放着篮球\n\tchar b='A';//另一个盒子里放着足球\n\tchar temp='0';//有一个空盒子\n\n\t//使用一下三步完成交换\n\tswap(a,b);\n\n\t//把盒子里的球倒出来看看\n\tprintf(\"box a:%c box b:%c\\n\");\n\treturn 0;\n}\n```\n\n==在这里给出输出==\n\n可以看出输出不对, 盒子里的球并没有被交换\n\n为什么会这样?\n原因在与swap函数\n\n>[!NOTE] 函数的形式参数和实际参数\n>对于函数的参数：\n>在声明和定义时写在函数参数列表中的参数是形式上的参数, 起到占位置的作用, 所以叫形式参数, 简称形参.\n>\n>形参在你调用函数时告诉你这里应当填什么样的数据.\n>\n>在调用函数时, 写入到参数列表的参数才是实际用到的参数, 称为实际参数, 简称实参.\n\n在这里, 我们把两个参数传入其中, 只是在形参之间换来换去, 没有影响到实参.\n试想一下, swap这个机器, 伸出两只机械臂, 要求你把篮球和足球放上去, 于是你另外拿了两个球给它, 它把球左手倒右手一换, 对你手上两个的盒子和其中的内容却没有任何影响.\n\n请注意, 我们的要实现交换两个球的目的, 不只要关心这两个球之间的关系, 还要关心球与盒子之间的关系, 一共是四个元素而不是两个元素.\n\n那么有没有一种东西, 既可以操作盒子, 又可以操作盒子中的内容呢?\n\n你好, 有的, 兄弟, 有的! 看一下指针吧, 兄弟!\n指针本体可以操作盒子, 通过解引用操作可以操作盒子内的物品, 两个要求, 一次满足, 简直太完美了.\n\n于是就可以实现一个新的swap函数:\n```c\nvoid new_swap(char * a, char * b)\n{\n\tchar temp = '0';\n\n\ttemp = *a;\n\t*a = *b;\n\t*b = temp;\n}\n\n//由于参数是两个指针, 因此调用函数传入参数时要注意使用取地址运算符传入地址\nint main(void)\n{\n\tchar a='B';//一个盒子里放着篮球\n\tchar b='A';//另一个盒子里放着足球\n\tchar temp='0';//有一个空盒子\n\n\t//使用一下三步完成交换\n\tswap(&a,&b);\n\n\t//把盒子里的球倒出来看看\n\tprintf(\"box a:%c box b:%c\\n\");\n\treturn 0;\n}\n```\n\n## 2. 指针和内存空间\n\n### 2.1 不同类型数据占据的存储空间\n\n 为了合理的存储不同大小的数据, 既不浪费, 也不溢出, 有不同数据类型.\n 为了应对不同的数据类型, 指针也有了不同的类型. 但是指针的类型和数据类型有一些区别.\n\n我们知道, 不同数据类型的本质区别就是占据的空间大小不同.\n\n![image.png](https://fuyunyou-note.oss-cn-wuhan-lr.aliyuncs.com/typora-user-images/202502071351935.png)\n\n==(此处给出数据类型大小表格)==\n\n我们使用`sizeof()`运算符可以计算数据的大小, sizeof的用法类似函数(但它实际上不是参数而是运算符), 括号中传入参数, 返回一个数字(该返回值的类型为size_t) 表示传入的参数的占据空间大小, 以字节为单位.\n```c\nprintf(\"size of char:%d\",sizeof(char));\nprintf(\"size of short:%d\",sizeof(short));\nprintf(\"size of int:%d\",sizeof(int));\n```\n\n照这样来看数组应该根据存储数据类型的不同, 拥有不同的大小, 然而事实却不是这样. 一般来说, 指针拥有固定的大小.\n原因也很简单, 指针存储的是地址, 所有的地址都是同一类型的数据, 不论是char还是int, 都是地址. 所以占据的大小都是相同的.\n\n那么可以说所有的指针都是同一类型的数据吗?\n当然不能.\n虽然指针本身所占的空间大小相同, 但其中包含的地址所指向的数据本身却是不同的.\n\n```c\nchar * char_ptr;\nshort * short_ptr;\nint * int_ptr;\n```\n以上的数据声明中, 有`char *, short *, int *` 三种不同类型的数据, 可以这样理解, 其中的`*`(解引用运算符)表示这三者都是指针, 而char, short, int表示其中存储的数据的不同类型. 这两个方面的信息共同构成了指针的类型.\n当计算机根据指针中存储的地址找到所在位置之后, 通过声明指针变量是给出char, int或其他数据类型的信息决定取一个字节或四个字节的数据.\n\n> [!info] `void` 类型 和`void*` 类型\n> `void` 表示无类型，不能直接用来定义变量，如`void x=0;`这条语句是不合法的。用在函数头的返回值或参数列表中，表示函数无参或无返回值。如`void func(void)`，表示一个既无参数有无返回值的函数。\n>  `void*`表示无类型指针，可以用来定义变量，`void* ptr=&x;`该语句是合法的。`void*`是为了满足一些函数的适配性而设计的（即泛型编程），例如，设计一个函数`long sumof(int a,int b)`用于计算两个数之和，因为不能确定要计算的两个数的大小，如果给出的参数超出了`int`类型的限制就会产生意想不到的结果。将其修改为`void* sumof(void* a,void* b,DATA_TYPE type)`，不论数据有多大，先接受了再说，同时传入数据类型，根据数据类型，在函数中采用不同的处理方式即可。\n>\n>  为何`void`不可以直接用于定义变量而`void*`可以？\n>  `void*`归根到底是一个指针，用该类型定义变量编译器知道用多少内存来存储该变量，因为一台机器上的指针类型大小是固定的。而对于`void`类型的变量，编译器不知道该使用多大的内存来存储，因此无法直接定义变量。相应的，由于`void*`类型没有数据类型，因此不能直接对`void*`指针直接解引用，也不能直接使用`++`运算符。例如，语句`int a=0; void* ptr = &a; b=*ptr`和`void* ptr=&a; ptr++;`都是不合法的。\n\n### 2.2 寻址空间和指针大小\n\n我们知道指针的大小一般都是相同的，那么会是多大呢？可以使用`sizeof()`运算符测算\n```c\nint a=10;\nchar b='a';\nfloat c=1.1;\n\nint *ptr1=&a;\nchar *ptr2=&b;\nfloat *ptr3=&c;\n\nprintf(\"size of ptr1 = %d\\n\",sizeof(ptr1));\nprintf(\"size of ptr2 = %d\\n\",sizeof(ptr2));\nprintf(\"size of ptr3 = %d\\n\", sizeof(ptr3));\n\n//输出\nsize of ptr1 = 8\nsize of ptr2 = 8\nsize of ptr3 = 8\n```\n\n\n大部分情况下, 结果都会是8. 这表示指针类型占据8字节空间大小.\n\n指针占据的空间是由CPU的寻址位数所决定的,  CPU的寻址位数决定了其能够访问的内存地址的范围，也决定了指针变量能够存储的地址值的位数。例如，在32位机器上，地址是由32个0或1的二进制序列组成，因此指针大小通常是4个字节（因为1个字节=8比特位，32比特位=4个字节）。而在64位机器上，地址需要64个0或1的二进制序列组成，因此指针大小通常是8个字节。\n\n当然cpu寻址位数并不是唯一的决定因素, 编译器的编译方式, 虚拟化技术的使用等其他原因可能导致指针大小与实际的CPU不匹配.\n\ncpu的寻址位数, 另一种说法, 也就是cpu的地址总线宽度, 决定了系统的地址空间的大小.\n\n我们在一些软件的release版本中经常能看见x86和x64后缀.\n\nx86是一种32位处理器架构，它广泛被应用于早期的计算机系统中。由于历史原因和广泛的兼容性，许多旧的软件和操作系统仍然基于x86架构。x86架构的处理器能够支持的内存寻址范围为2^32（约4GB），这在一定程度上限制了其在处理大数据和复杂计算任务时的能力。然而，对于许多日常应用和旧版软件来说，x86架构仍然足够满足需求。\n\n相比之下，x64（也称为x86-64或AMD64）是一种64位处理器架构，它提供了更大的内存寻址范围和更高的计算能力。x64架构的处理器能够支持的内存寻址范围为2^64（实际限制通常为16EB，即160亿GB），这使得它能够轻松应对大数据处理和复杂计算任务。此外，x64架构还向下兼容32位应用程序，这意味着用户可以在64位操作系统上运行旧的32位软件。\n\n因此，当软件的release版本后缀带有x86或x64时，这表示该软件分别针对32位或64位的处理器架构进行了优化。用户应该根据自己的操作系统和硬件平台选择合适的版本进行安装。如果你的操作系统是64位的，并且你的计算机硬件支持x64架构，那么建议选择x64版本的软件以获得更好的性能和兼容性。如果你的操作系统或硬件平台是32位的，或者你需要运行一些只能在32位环境下运行的旧版软件，那么你可能需要选择x86版本的软件。\n\n==(推书) 汇编语言--王爽==\n### 2.3 数据的存储方式\n\n#### 2.3.1 问题的引入\n```c\nint int_data=0x12345678;\nchar * char_ptr=NULL;\n\nchar_ptr = (char *)(&int_data);\nprintf(\"0x%x\",*char_ptr);\n```\n以上示例输出内容是什么?\n\n在不同的平台上,  输出内容会有差别, 大部分人在PC上应该输出的是0x78, 而在一些特定平台, 则会输出0x12.\n\n原因是什么?\n\n先看看以上操作在干嘛,  定义一个`int`类型的变量, 取这个变量的地址, 强制类型转换成`char*`类型的指针, 并通过指针来访问该地址的内容.\n\n还记得我说的指针的类型的含义吗, `char *` 表示在数组存储的地址上访问`sizeof(char)` 大小的字节数目(1个字节), `int *`表示在数组存储的地址上访问`sizeof(int)` 大小的字节数目(一般为4个字节).\n\n也就是说, 原本的四字节大小的int_data通过这种访问方式被截断为一个字节\n\n在定义时, int_data被赋值为`0x12345678`, 其中`0x`表示其后的数据是16进制格式, 也就是说, 刚巧12,34,56,78分别各是一个字节\n0x12=0b 0001 0010 , 其他字节内容类似.\n\n接下来就是最关键的问题: 在四个字节的内容被裁剪为一个字节的情况下, 哪个字节会被返回?\n\n#### 2.3.2 字节序和存储模式\n\n从直觉来看, 最开始的12和最末尾的78应该是最有可能的, 结果也是符合直觉的.\n\n再来看一看这个数: 12 34 56 78.\n我们读这个数是从12开始, 而这个数的最低位是78, 如果把这个数看成10进制,则 8是个位, 7是十位, 虽然16进制没有个位十位的说法, 但是原理是类似的, 8是最低位, 7是次低位.\n78是最低字节(LSB, least significant byte), 相应的, 12是最高字节(MSB, most significant byte). 字节的高低称作字节序\n\n不论一个数是按照十进制还是十六进制, 或是二进制, 八进制等等, 数字总有其排列顺序.\n\n数中的字节讲顺序, 计算机里的存储也讲顺序, 计算机内存按照地址进行编号, 从0开始到虚拟地址空间的最大值, 依次增加, 数据依次存储在其中. 0x1000是低地址, 0x1003是高地址\n\n根据字节序的存储地址不同, 可以分为两种存储模式\n\n1. **大端存储**：在大端存储模式下，数据的高字节（或称作高位、最重要字节）被存储在内存的低地址处，而数据的低字节（或称作低位、最不重要字节）存储在高地址处。这意味着当你从低地址向高地址读取内存时，数据会按照从高到低的顺序出现。例如，对于十六进制数0x1234，在大端模式下，内存中的布局就是0x12在前（低地址），0x34在后（高地址）。\n2. **小端存储**：在小端存储模式下，数据的低字节存储在内存的低地址处，而高字节存储在高地址处。也就是说，当你从低地址开始读取时，最先读到的是数据的低字节，然后才是高字节。对于相同的十六进制数0x1234，在小端模式下，内存布局会是0x34在前（低地址），0x12在后（高地址）。\n\n于是, 对于0x12345678\n1. **在大端存储模式下**：\n    - `int_data`的内存布局（从低地址到高地址）将是：`0x12`, `0x34`, `0x56`, `0x78`。\n    - `char_ptr`指向`int_data`的第一个字节，即`0x12`。\n    - 因此，`printf(\"%x\", *char_ptr);`将输出`12`。\n2. **在小端存储模式下**：\n    - `int_data`的内存布局（从低地址到高地址）将是：`0x78`, `0x56`, `0x34`, `0x12`。\n    - `char_ptr`指向`int_data`的第一个字节，即`0x78`。\n    - 因此，`printf(\"%x\", *char_ptr);`将输出`78`。\n\n因此，该代码在大端存储模式下输出`12`，在小端存储模式下输出`78`。\n\n[[C语言指针系列图解.excalidraw]]\n\n使用以下方式可以判断机器是那种存储方式?\n```c\n#include <stdio.h>\n\nint main() {\n    int num = 1;\n    if (*(char *)&num == 1) {\n        printf(\"Little-endian\\n\");\n    } else {\n        printf(\"Big-endian\\n\");\n    }\n    return 0;\n}\n```\n\n>[!note] 注意\n>你应当注意到了, 不论指针所指向的数据占据的内存空间有多大, 它总是指向数据占据的最低地址, 这一点在数组中也是适用的, 具体会在接下来的`3.指针与数组`部分详解.\n## 3. 指针和数组\n\n### 3.1 使用指针操作数组\n\n数组被用来存储一系列相同类型的数据\n\n```c\nint a[10]={1,2,3,4,5,6,7,8,9,10};\n```\n对于数组的基本用法这里不多赘述, 如果不了解建议补充一下基础知识.\n\n我们知道, 数组通过数组下标取数\n```c\nint x=a[0];\n```\n取数组的第一个元素赋值给变量x.\n\n然而还有另一种用法, 数组名是一个相应类型的指针.\n\n以上例子中, `a`可以直接赋值给`int *`类型的指针使用，且是一个合法地址。该地址是数组第一个元素的地址。\n```c\nint * int_ptr=a;\n```\n以上写法, 编译既不会报错, 也不会警告. 是合法合规而且经常使用的写法.\n\n于是, 对于数组的元素的访问, 可以有两种不同的方式完成.\n```c\nint a[10]={1,2,3,4,5,6,7,8,9,10};\nint data1=a[0];//访问第一个数组元素\nint data2=*(a+1);//访问第一个数组元素之后的一个元素\n\nprintf(\"data1:%d\",data1);\nprintf(\"data2:%d\",data2);\n\n//输出:\ndata1:1\ndata2:2\n```\n\n### 指针运算\n以上代码涉及到一个新的操作：指针运算\n仔细观察其中的写法,：`*(a+1)`, 表示a增加“1”, 然后解引用。\n\n一般来说, “加1”操作是直接作用在数值上的，加上1就是数值变大1，但是对于指针来说, 这个`1`不是大小上的1, 而是单位`1`.\n这里的单位1为指针存储的类型所占的字节数。\n\n之前讲解过, 对于`char *`,`int*`等不同类型的指针的含义:\n\n\"`char *` 表示在数组存储的地址上访问`sizeof(char)` 大小的字节数目(1个字节), `int *`表示在数组存储的地址上访问`sizeof(int)` 大小的字节数目(一般为4个字节)\"\n\n对于`char *`类型的数据, 自增以`char`类型的大小为单位1, 其值就是1个字节.\n假设`char * char_ptr=0x1000` 那么`char_ptr+1`后, 其值为`0x1001`. 而如果是`int_ptr+1`, 其值为`0x1004`. 其他类型与此相似.\n\n==(在这里给出数组数据在内存中的排列)==\n[[C语言指针系列图解.excalidraw]]\n\n指针运算的这种设计极好的契合了数组操作, 数组各个元素可以直接依照自增取数.\n\n```c\n\tint a[10]={1,2,3,4,5,6,7,8,9,10};\n    for(int i=0;i<10;i++)\n    {\n        printf(\"%d\\n\",*(a+i));\n        printf(\"%d\\n\",a[i]);\n    }\n```\n\n以上两种写法都能遍历数组\n\n>[!error] 数组名和指针的区别\n>看了以上的内容，你可能会认为数组名就是一个指向数组首元素地址的指针，并完全把它当作指针来使用。但数组名不是一个指针，和不能混为一谈。请看如下示例：\n>```c\n>int arr[5]={1,2,3,4,5};\n>int a=*(arr++);\n>//报错：error: lvalue required as increment operand\n>```\n>以上代码中`arr++`操作是不合法的，编译报错的意思是说`++`运算符需要一个左值作为其操作数，虽然数组名是一个左值，但不是一个可以修改的左值。这样是有原因的，数组名作为一个数组的标识（symbol）应该永远指向数组的首地址，不应被任何操作更改，这样才能保证对数组任意元素的正常访问。\n>那么为什么`arr+1`这样的操作是合法的？\n>原因是”+1“操作不会改变arr本身的值，arr+1这样的表达式最终的结果是一个右值，终究是要赋值给某个变量或作为其他运算符的操作数使用。无论是哪种情况，都不会影响arr中存储的值。\n\n\n### 3.2 数组到指针的退化\n\n\n在 C/C++ 中，​**数组到指针的退化（array-to-pointer decay）​**​ 是一个重要的隐式转换机制，它决定了数组名在大多数情况下如何被自动转换为指针。理解这个概念对掌握 C/C++ 的指针和数组操作至关重要。\n\n---\n\n#### ​**1. 什么是数组到指针的退化？​**​\n\n- ​**数组名 `arr` 在大多数表达式中会自动转换为指向其首元素的指针**。\n- 这种转换是隐式的（编译器自动完成），称为 ​**​\"退化（decay）\"​**。\n- 退化后，数组名 `arr` 不再代表整个数组，而是变成一个指向 `arr[0]` 的指针（类型 `T*`，其中 `T` 是数组元素的类型）。\n\n​**示例**​\n\n```c\nint arr[5] = {1, 2, 3, 4, 5};\nint *p = arr;  // 数组名 arr 退化为 int* 指针\n```\n\n- `arr` 原本是一个 `int[5]` 类型的数组，但在赋值给 `p` 时，它退化为 `int*` 类型（指向 `arr[0]`）。\n\n---\n\n#### ​**2. 何时发生数组到指针的退化？​**​\n\n数组名在以下情况下会退化为指针：\n\n1. ​**作为函数参数传递时**​：\n\n    ```c\n    void func(int *p);  // 函数接受指针\n    int arr[5] = {1, 2, 3, 4, 5};\n    func(arr);  // arr 退化为 int* 指针\n    ```\n\n    - 即使函数声明为 `void func(int p[5])`，`p` 仍然会被当作 `int*` 处理（数组语法只是语法糖）。\n2. ​**在算术运算（`+`, `-`, `++`, `--`）中**​：\n\n    ```c\n    int *p = arr + 1;  // arr 退化为指针，然后 +1 运算\n    ```\n\n3. ​**在 `[]` 运算符中**​：\n\n    ```c\n    int val = arr[2];  // 等价于 *(arr + 2)\n    ```\n\n4. ​**在比较运算 （ `!=`, `<`, `>` 等）中**​：\n\n    ```c\n    if (arr == NULL) { ... }  // arr 退化为指针\n    ```\n\n5. ​**在初始化指针时**​：\n\n    ```c\n    int *p = arr;  // arr 退化为指针\n    ```\n\n\n---\n\n#### ​**3. 何时不会发生退化？​**​\n\n数组名在以下情况下**不会退化为指针**，仍然保持数组类型：\n\n1. ​**`sizeof(arr)`**​：\n\n    ```c\n    size_t size = sizeof(arr);  // 返回整个数组的大小（5 * sizeof(int)）\n    ```\n\n    - 如果 `arr` 退化为指针，`sizeof(arr)` 会返回指针的大小（如 4 或 8 字节），而不是数组大小。\n2. ​**`&arr`（取数组地址）​**​：\n\n    ```c\n    int (*ptr_to_array)[5] = &arr;  // 返回 int(*)[5] 类型（数组指针）\n    ```\n\n    - `&arr` 返回的是**指向整个数组的指针**​（`int(*)[5]`），而不是指向首元素的指针（`int*`）。\n3. ​**字符串字面量初始化字符数组时**​：\n\n    ```c\n    char str[] = \"hello\";  // str 是数组，不会退化为指针\n    ```\n\n\n---\n\n#### ​**4. 退化后的指针类型**​\n\n- 如果 `arr` 是 `T[N]` 类型（`T` 是元素类型，`N` 是数组大小），则退化后的指针类型是 `T*`。\n- ​**示例**​：\n\n    ```c\n    int arr[5];     // 类型是 int[5]\n    int *p = arr;   // 退化后 p 的类型是 int*\n    ```\n\n\n---\n\n#### ​**5. 退化与指针算术**​\n\n由于退化后的 `arr` 变成 `T*`，我们可以对它进行指针算术运算：\n\n```c\nint arr[5] = {1, 2, 3, 4, 5};\nint *p = arr;     // p 指向 arr[0]\nint *q = p + 3;   // q 指向 arr[3]（即 4）\n```\n\n- `arr + i` 等价于 `&arr[0] + i`，计算的是第 `i` 个元素的地址。\n\n---\n\n#### ​**6. 退化与多维数组**​\n\n对于多维数组，退化规则仍然适用，但会逐层退化：\n\n```c\nint matrix[3][4];  // int[3][4] 类型\n```\n\n- ​**`matrix` 退化为 `int(*)[4]`**​（指向 `int[4]` 的指针）。\n- ​**`matrix[0]` 退化为 `int*`**​（指向 `int` 的指针）。\n\n ​**示例**​\n\n```c\nint (*p)[4] = matrix;  // p 指向 matrix[0]（int[4] 类型）\nint *q = matrix[0];    // q 指向 matrix[0][0]（int 类型）\n```\n\n---\n\n#### ​**7. 退化带来的问题**​\n\n由于退化是隐式的，可能会导致一些意外的行为：\n\n ​**​(1) 数组大小信息丢失**​\n\n```c\nvoid func(int *p) {\n    // 无法知道 p 指向的数组有多大！\n}\n\nint arr[5] = {1, 2, 3, 4, 5};\nfunc(arr);  // 退化后，func 不知道 arr 的大小\n```\n\n- ​**解决方案**​：显式传递数组大小：\n\n    ```c\n    void func(int *p, size_t size);\n    func(arr, sizeof(arr)/sizeof(int));\n    ```\n\n\n ​**​(2) 不能对退化后的指针使用 `sizeof`**​\n\n```c\nint arr[5];\nint *p = arr;\nsize_t s1 = sizeof(arr);  // 20（假设 int 是 4 字节）\nsize_t s2 = sizeof(p);    // 4 或 8（指针的大小）\n```\n\n- `sizeof(arr)` 返回整个数组的大小，但 `sizeof(p)` 返回指针的大小。\n\n---\n\n#### ​**8. 如何避免退化？​**​\n\n如果希望保留数组类型（防止退化），可以使用：\n\n1. ​**引用传递（C++）​**​：\n\n    ```c\n    void func(int (&arr)[5]);  // 接受 int[5] 类型的引用\n    int arr[5] = {1, 2, 3, 4, 5};\n    func(arr);  // 不会退化\n    ```\n\n    - 这样 `sizeof(arr)` 在函数内部仍然有效。\n2. ​**使用 `std::array`（C++）​**​：\n\n    ```c\n    #include <array>\n    std::array<int, 5> arr = {1, 2, 3, 4, 5};\n    ```\n\n    - `std::array` 是 C++ 的容器，不会退化。\n\n---\n\n#### ​**9. 总结**​\n\n|​**关键点**​|​**说明**​|\n|---|---|\n|​**什么是退化？​**​|数组名 `arr` 在大多数情况下隐式转换为 `&arr[0]`（指针）。|\n|​**何时发生？​**​|函数传参、指针运算、`[]` 操作、比较运算等。|\n|​**何时不发生？​**​|`sizeof(arr)`, `&arr`, 初始化字符数组时。|\n|​**退化后的类型**​|`T[N]` → `T*`（指向首元素的指针）。|\n|​**多维数组退化**​|`int[3][4]` → `int(*)[4]`（指向行的指针）。|\n|​**退化的问题**​|丢失数组大小信息，`sizeof` 行为不同。|\n|​**如何避免？​**​|使用引用（C++）或 `std::array`（C++）。|\n\n理解 ​**array-to-pointer decay**​ 能帮助你更好地掌握 C/C++ 的数组和指针操作，避免常见的陷阱！ 🚀\n\n### 3.3 在数组中使用sizeof()\n\n有如下代码示例，尝试运行，看看结果和你想的是否相同:\n```c\nint arr[5] = {1, 2, 3, 4, 5};\nint *ptr=arr;\n\nprintf(\"size of arr:%d\",sizeof(arr));\nprintf(\"size of ptr:%d\",sizeof(ptr));\n```\n\n\n继续来看遍历数组的例子\n\n```c\n\tint a[]={2,3,4,2,35,624,546,31,0,46};\n\tint arr_size=10;\n    for(int i=0;i<arr_size;i++)\n    {\n        printf(\"%d\\n\",*(a+i));\n        printf(\"%d\\n\",a[i]);\n    }\n```\n\n遍历数组是, for循环的终止条件是数组的长度.\n直接在循环中写出数组长度的数字是一种不推荐的写法, 有几个缺点:\n\n1. 对于明确给出长度的数组, 我们可以直接知道它的长度, 但对于没有给出长度的数组, 不能一眼看出它的长度.\n2. 直接在for循环中使用数组长度的数字,  是一种硬编码方式, 如果要改动数组大小, 那么每一个在程序中用到的数组遍历操作都要更改代码, 非常麻烦.\n\n更推荐使用的方法是使用sizeof()运算符:\n具体操作如下:\n`arr_size = sizeof(arr_name)/sizeof(data_type)`\n\n`sizeof(arr_name)`计算数组的所有元素占据的字节数, `sizeof(data_type)`计算数组每个元素占据的字节数. 两个数一除, 就能算出数组大小.\n\n```c\n//使用以上方法遍历数组\n\tint a[]={2,3,4,2,35,624,546,31,0,46};\n    for(int i=0;i<sizeof(a)/sizeof(int);i++)\n    {\n        printf(\"%d\\n\",*(a+i));\n        printf(\"%d\\n\",a[i]);\n    }\n```\n\n\n#### sizeof和strlen的区别\n\n在以上示例中提到了数组的一个用法: 即使用字符数组存储字符串. 对于这样的字符串既可以使用sizeof()获取其长度, 也可以使用strlen()\n来看一下sizeof和strlen的区别:\n\n#### 1. 定义与性质\n\n1. **sizeof**\n\n    - 性质：是C/C++中的一个运算符，用于计算变量或数据类型所占的内存大小。\n    - 返回值：其返回值是size_t类型，表示某种类型或对象的字节数。\n    - 计算时机：sizeof是在编译时计算的，而不是运行时，这使得它非常高效。\n2. **strlen**\n\n    - 性质：是C语言标准库中的一个函数，用于计算字符串的长度。\n    - 语法：`size_t strlen(const char *str);`\n    - 参数：str表示要计算长度的字符串，以'\\0'结尾的字符指针。\n    - 返回值：返回字符串str的字符数量，不包含'\\0'结尾字符。\n    - 计算时机：strlen的结果是在运行时计算出来的。\n\n#### 2. 使用场景与限制\n\n1. **sizeof**\n\n    - 可以用于数据类型、变量、数组、结构体等，返回它们在内存中的大小，单位是字节。\n    - 对于数组，sizeof可以直接给出数组所占用的内存大小。但需要注意，当数组作为函数参数传递时，它会被退化为指针，此时使用sizeof来计算数组的大小将返回指针的大小，而不是数组的实际大小。\n    - 对于指针，sizeof返回的是指针本身的大小，而不是它所指向的内容的大小。\n2. **strlen**\n\n    - 只能用于计算以'\\0'结尾的字符串的长度。\n    - 如果字符串没有以'\\0'结尾，strlen的行为是未定义的，可能会继续计算直到遇到内存中的某个'\\0'字符为止。\n    - strlen的参数必须是char*类型的指针，不能用于其他数据类型。\n\n#### 3. 示例对比\n\n以下是一个简单的示例，用于说明sizeof和strlen在实际编程中的使用：\n\n```c\n#include <stdio.h>\n#include <string.h>\n\nint main()\n{\n\tchar str[] = \"Hello, World!\";\n\tchar *ptr = str;\n\tprintf(\"Sizeof str: %zu bytes\\n\", sizeof(str));  // 输出数组的大小，包括结尾的'\\0'\n\tprintf(\"Sizeof ptr: %zu bytes\\n\", sizeof(ptr));  // 输出指针的大小\n\tprintf(\"Strlen of str: %zu\\n\", strlen(str));     // 输出字符串的长度，不包括结尾的'\\0'\n\treturn 0;\n}\n```\n\n在这个示例中，`sizeof(str)`返回的是数组`str`所占用的内存大小，包括结尾的'\\0'字符；而`sizeof(ptr)`返回的是指针`ptr`本身所占用的内存大小，与它所指向的字符串的长度无关。`strlen(str)`则返回的是字符串`str`的长度，不包括结尾的'\\0'字符。\n\n\n## 4. 指针和结构体\n\n### 4.1 基本用法\n\n使用结构体可以把相关的数据有逻辑的组合在一起, 并通过`结构体名称+ .`来引用结构体中的变量\n\n```c\n#include <stdio.h>\n#include <string.h> // 包含strcpy函数的头文件\n\nstruct Student {\n    int id;         // 学生学号\n    char name[50];  // 学生姓名\n    float score;    // 学生成绩\n};\n\nint main()\n{\n\tstruct Student stu;//创建一个Student类型的数据stu\n\tstu.id=1;\n\tstrcpy(stu.name, \"zhangsan\"); // 使用strcpy函数复制字符串\n\tstu.score=85.0;\n}\n```\n可以看出结构体和数组是很像的, 都是用来存储一系列数据的. 二者的区别在于同一结构体中可以包含不同数据类型的数据, 而一个数组中所有数据的数据类型都相同\n结构体中也可以包含数组作为其元素, 如上所示, `char name[50]`是用于存储学生姓名的数组.\n\n**通过typedef为结构体起一个别名**\n```c\n//使用typedef定义一个结构体,为其起一个别名\n\n//写法1:\ntypedef struct Student\n{\n    int id;        // 学生学号\n    char name[50]; // 学生姓名\n    float score;   // 学生成绩\n} Stu;\n\n/*\n起别名后可以一直使用别名,于是结构体原本的名字可以省略掉\n写法2:\ntypedef struct\n{\n    int id;        // 学生学号\n    char name[50]; // 学生姓名\n    float score;   // 学生成绩\n} Stu;\n*/\n\n//以上两种写法是一样的\nint main()\n{\n    Stu stu; // 创建一个Stu类型的数据stu.因为起了别名,此处可以直接使用别名\n    stu.id = 1;\n    strcpy(stu.name, \"zhangsan\"); // 使用strcpy函数复制字符串\n    stu.score = 85.0;\n}\n```\n\n### 4.2 使用指针操作结构体\n\n结构体同样可以通过指针来操作\n\n```c\n//使用typedef定义一个结构体,为其起一个别名\ntypedef struct Student\n{\n    int id;        // 学生学号\n    char name[50]; // 学生姓名\n    float score;   // 学生成绩\n} Stu;\n\nint main()\n{\n    Stu stu; // 创建一个Stu类型的数据stu.因为起了别名,此处可以直接使用别名\n    stu.id = 1;\n    strcpy(stu.name, \"zhangsan\"); // 使用strcpy函数复制字符串\n    stu.score = 85.0;\n\n    Stu* ptr_stu;// 创建一个指向Stu类型的指针ptr_stu\n    ptr_stu->id = 1;\n    strcpy(ptr_stu->name, \"zhangsan\"); // 使用strcpy函数复制字符串\n    ptr_stu->score = 85.0;\n}\n```\n使用指针同样可以操作结构体成员, 使用`指针名+ ->`运算符即可.\n\n既然涉及到了指针操作, 那么来看一看结构体在内存中的存储方式吧\n\n---\n\n#### **1. 结构体的存储方式**\n\n结构体在内存中的存储方式是按照其成员变量的声明顺序依次存储的。每个成员变量占用的内存空间取决于其数据类型。例如：\n\n```c\nstruct Example {\n    char a;    // 1字节\n    int b;     // 4字节\n    short c;   // 2字节\n};\n```\n\n在没有考虑对齐的情况下，结构体的内存布局大致如下：\n\n- `char a` 占用1字节。\n\n- `int b` 占用4字节。\n\n- `short c` 占用2字节。\n\n\n因此，结构体的总大小应该是 `1 + 4 + 2 = 7` 字节。然而，实际的存储方式会受到对齐规则的影响。\n\n---\n\n#### **2. 结构体的对齐方式**\n\n为了提高内存访问效率，编译器通常会对结构体的成员变量进行对齐（alignment）。对齐规则确保每个成员变量的地址是其大小的整数倍。例如，一个4字节的`int`变量，其地址必须是4的倍数。\n\n##### **2.1 对齐规则**\n\n1. **成员变量对齐**：\n\n    - 每个成员变量的起始地址必须是其自身大小的整数倍。例如：\n\n        - `char` 类型的变量对齐要求是1字节对齐。\n\n        - `short` 类型的变量对齐要求是2字节对齐。\n\n        - `int` 类型的变量对齐要求是4字节对齐。\n\n        - `long long` 类型的变量对齐要求是8字节对齐。\n\n    - 如果成员变量的起始地址不符合对齐要求，编译器会在前面插入填充字节（padding）。\n\n2. **结构体整体对齐**：\n\n    - 结构体的总大小必须是其最大成员变量对齐要求的整数倍。例如，如果结构体中最大的成员变量是4字节对齐的，那么整个结构体的大小必须是4的倍数。\n\n    - 如果结构体的总大小不符合对齐要求，编译器会在结构体的末尾插入填充字节。\n\n\n---\n\n#### **3. 示例分析**\n\n以之前的结构体为例：\n\n```c\nstruct Example {\n    char a;    // 1字节\n    int b;     // 4字节\n    short c;   // 2字节\n};\n```\n\n假设系统的默认对齐规则如下：\n\n- `char`：1字节对齐\n\n- `int`：4字节对齐\n\n- `short`：2字节对齐\n\n\n##### **3.1 成员变量对齐**\n\n1. **`char a`**：\n\n    - 起始地址：0\n\n    - 占用1字节，对齐要求是1字节对齐，因此不需要填充。\n\n2. **`int b`**：\n\n    - 起始地址：4（下一个4字节对齐的地址）\n\n    - 占用4字节，对齐要求是4字节对齐。\n\n    - 在`char a`和`int b`之间插入3个填充字节。\n\n3. **`short c`**：\n\n    - 起始地址：8（下一个2字节对齐的地址）\n\n    - 占用2字节，对齐要求是2字节对齐。\n\n\n##### **3.2 结构体整体对齐**\n\n- 结构体的总大小：`1（char）+ 3（填充）+ 4（int）+ 2（short）= 10` 字节。\n\n- 结构体中最大的成员变量是`int`，对齐要求是4字节。\n\n- 因此，结构体的总大小必须是4的倍数。\n\n- 在结构体的末尾插入2个填充字节，使得总大小为12字节。\n\n\n最终，结构体在内存中的布局如下：\n\n[[C语言指针系列图解.excalidraw]]\n\n| 地址  | 数据        | 说明        |\n| --- | --------- | --------- |\n| 0   | `char a`  | 成员变量      |\n| 1   | 填充字节      | 对齐`int b` |\n| 2   | 填充字节      | 对齐`int b` |\n| 3   | 填充字节      | 对齐`int b` |\n| 4   | `int b`   | 成员变量      |\n| 8   | `short c` | 成员变量      |\n| 10  | 填充字节      | 对齐结构体     |\n| 11  | 填充字节      | 对齐结构体     |\n\n结构体的总大小为12字节。\n\n值得注意的是, 改变结构体成员变量的顺序, 结构体大小也会随之改变\n```c\n//该结构体占据12字节\ntypedef struct {\n    char a;\n    int b;\n    short c;\n} Test;\n\n//该结构体占据8字节\ntypedef struct {\n    char a;\n    short c;\n    int b;\n} Test;\n\n```\n\n---\n\n#### **4. 修改对齐方式**\n\nC语言允许通过编译器的特定指令或属性来修改结构体的对齐方式。例如，在GCC编译器中，可以使用`__attribute__((packed))`来禁用填充字节：\n\n```c\n#include <stdio.h>\n\n//尝试把attribute__((packed))删除，看看输出结果\ntypedef struct {\n    char a;\n    int b;\n    short c;\n} __attribute__((packed)) Test;\n\nint main(void)\n{\n    Test test;\n    test.a = 0x12;\n    test.b = 0x12345678;\n    test.c = 0x1234;\n\n    char *ptr = (char *)&test;\n   \n    for(int i = 0; i < sizeof(Test); i++)\n    {\n        printf(\"%02x\\n\", *(ptr + i));\n    }\n}\n```\n\n在这种情况下，结构体的总大小为7字节，成员变量之间没有填充字节。\n\n\n---\n\n#### **5. 对齐方式的意义**\n\n1. **提高访问效率**：\n\n    - 对齐的内存访问通常比非对齐访问更快，因为硬件对对齐的内存访问进行了优化。\n\n    - 非对齐访问可能会导致额外的内存读取操作，降低性能。\n\n2. **跨平台兼容性**：\n\n    - 不同的硬件平台可能有不同的对齐要求。通过明确指定对齐方式，可以确保结构体在不同平台上具有一致的内存布局。\n\n3. **节省空间**：\n\n    - 在某些情况下，禁用对齐（如使用`packed`属性）可以节省内存空间，但这可能会牺牲访问效率。\n\n\n---\n\n#### **6. 总结**\n\nC语言结构体的存储方式是按照成员变量的声明顺序依次存储的，但实际的内存布局会受到对齐规则的影响。对齐规则确保每个成员变量的地址是其自身大小的整数倍，并且结构体的总大小是其最大成员变量对齐要求的整数倍。通过理解结构体的对齐方式，可以更好地优化内存使用和提高程序性能。\n\n了解了结构体的存储方式和对齐方式, 可以使用指针自增的方式访问结构体, 偏移合适的大小, 避开填充字节获取有效的信息, 或者直接禁用填充字节.\n不过, 并不推荐使用指针自增这种方式访问, 指针类型是固定的, 取出来的数据也是按照指针类型取出, 但结构体中的数据却不全是同一类型, 用这种方法取数非常麻烦. 直接使用`指针名 + ->`运算符, 简单且直观.\n\n### 4.3 数组和结构体相互转换\n\n禁用填充字节的结构体与数组直接可以直接相互转化, 不会出现问题.\n```c\n#include <stdio.h>\n\ntypedef struct {\n    char a;\n    int b;\n}\n//解除注释看一看\n// __attribute__((packed))\nTest;\n\nint main(void)\n{\n    char arr[5]={0x12,0x12,0x34,0x56,0x78};\n    Test* ptr_test=(Test*)arr;\n\n    printf(\"%x\\n\",ptr_test->a);\n    printf(\"%x\\n\",ptr_test->b);\n}\n```\n\n对于结构体和数组相互转化, 试看如下的应用\n如下是[某品牌激光雷达开发手册](D:\\work\\ToF_radar\\LDROBOT_STL-27L_Development_Manual_CN_v0.2.pdf), 其中`3.1节 数据包格式`中描述了雷达向控制器(计算机)传输的数据包的格式, 并给出了数据结构定义.\n\n如何将[原始数据包](D:\\work\\ToF_radar\\数据包结构.txt)转化为结构体?\n\n首先使用数组作为接收缓冲区, 数组大小等于两个数据包大小, 数据类型为uint8_t, 也就是char\n\n```c\n#define PACKET_SIZE 47\n\ntypedef struct {\n    uint8_t header;//数据包头,固定为0x54\n    uint8_t packet_length;//数据包长度,固定为0x2c\n    uint16_t speed;//雷达旋转速度\n    uint16_t start_angle;//该数据包的起始角度\n    LidarPointStructDef point[POINT_PER_PACKET];//激光点数据,每个数据包包含12个激光点\n    uint16_t end_angle;//该数据包的结束角度\n    uint16_t timestamp;//时间戳\n    uint8_t crc8;//CRC校验码\n} __attribute__((packed)) LidarPacket;\n\n//接收数据包的函数\nvoid Recieve_LidarPacket(uint8_t * rx_buffer)\n{\n//具体实现不必关心\n}\n\nuint8_t rx_buffer[PACKET_SIZE];\n\nRecieve_LidarPacket(rx_buffer);//调用接收函数接收数据包,调用完成后rx_buffer就装了一个数据包长度的数据了,而且第一个数组元素就是数据包头\n\nLidarPacket* pLidarPacketStruct=(LidarPacket*)rx_buffer;//将uint8*类型的数组直接转化为LidarPacket*,由于LidarPacket被定义为禁用填充字节的模式,后续的所有元素都会按照顺序一一对应\n\nprintf(\"0x%2x\",pLidarPacketStruct->header);//可以直接使用指针访问对应元素,不会出现偏差\n\n```\n\n事实上, 对于任何拥有严格结构限制的数据, 禁用填充字节使用结构体接收, 是一种常见的应用. 如接收通讯协议数据, 接收特定文件格式. 同时也保证代码的可移植性,节省内存空间. 相应的劣势是访问结构体的时间会增加.\n\n## 5. 函数指针\n待续...","slug":"c语言专题讲解","published":1,"updated":"2025-08-31T15:16:28.274Z","comments":1,"layout":"post","photos":[],"_id":"cmezujpts0005qk8y3zzggtn1","content":"<h2 id=\"1-指针的基础知识\"><a href=\"#1-指针的基础知识\" class=\"headerlink\" title=\"1. 指针的基础知识\"></a>1. 指针的基础知识</h2><h3 id=\"1-1-指针的基本语法\"><a href=\"#1-1-指针的基本语法\" class=\"headerlink\" title=\"1.1 指针的基本语法\"></a>1.1 指针的基本语法</h3><p>与指针操作相关的运算符: 解引用运算符<code>*</code>, 取地址运算符<code>&amp;</code></p>\n<p>指针的基本使用方法 或者说 最基础的语法如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//操作1</span></span><br><span class=\"line\"><span class=\"type\">int</span> contianer = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> content = <span class=\"number\">1</span>;</span><br><span class=\"line\">contianer = content;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//操作2</span></span><br><span class=\"line\"><span class=\"type\">int</span> * contianer = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> content = <span class=\"number\">1</span>;</span><br><span class=\"line\">contianer = &amp;content;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;contianer:%d&quot;</span>,*contianer);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;contianer:%d&quot;</span>,contianer);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;contianer:%x&quot;</span>,contianer);</span><br></pre></td></tr></table></figure>\n<p>对比以上两种操作</p>\n<p>指针用于存储地址, 通过地址可以找寻到该地址处的数据, 或者以该地址为起始地址的数据.</p>\n<h3 id=\"1-2-指针的简单应用\"><a href=\"#1-2-指针的简单应用\" class=\"headerlink\" title=\"1.2 指针的简单应用\"></a>1.2 指针的简单应用</h3><p>如何实现交换两个数的内容:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> a=<span class=\"string\">&#x27;B&#x27;</span>;<span class=\"comment\">//一个盒子里放着篮球</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> b=<span class=\"string\">&#x27;A&#x27;</span>;<span class=\"comment\">//另一个盒子里放着足球</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> temp=<span class=\"string\">&#x27;0&#x27;</span>;<span class=\"comment\">//有一个空盒子</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//使用一下三步完成交换</span></span><br><span class=\"line\">\ttemp = a;<span class=\"comment\">//篮球放在空盒子里, 原本放篮球的盒子现在为空</span></span><br><span class=\"line\">\ta = b;<span class=\"comment\">//足球放在空盒子里, 此时原本放足球的盒子是空 注意不是b = a;</span></span><br><span class=\"line\">\tb = temp; <span class=\"comment\">//空盒子中放入篮球, 完成物体的交换</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上是基本的交换两个数的实现, 这样写完全没问题. 如果我有10000个这样的数需要交换, 不可能写一万遍代码吧? 很自然的想到, 使用函数, 把重复使用的代码提取成一个函数.</p>\n<p>那么如何写呢?</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">char</span> a, <span class=\"type\">char</span> b)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> temp=<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//使用一下三步完成交换</span></span><br><span class=\"line\">\ttemp = a;<span class=\"comment\">//篮球放在空盒子里, 原本放篮球的盒子现在为空</span></span><br><span class=\"line\">\ta = b;<span class=\"comment\">//足球放在空盒子里, 此时原本放足球的盒子是空 注意不是b = a;</span></span><br><span class=\"line\">\tb = temp; <span class=\"comment\">//空盒子中放入篮球, 完成物体的交换</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了这个函数实现了</p>\n<p>接下来在主函数调用一下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">char</span> a, <span class=\"type\">char</span> b)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> temp=<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//使用一下三步完成交换</span></span><br><span class=\"line\">\ttemp = a;<span class=\"comment\">//篮球放在空盒子里, 原本放篮球的盒子现在为空</span></span><br><span class=\"line\">\ta = b;<span class=\"comment\">//足球放在空盒子里, 此时原本放足球的盒子是空 注意不是b = a;</span></span><br><span class=\"line\">\tb = temp; <span class=\"comment\">//空盒子中放入篮球, 完成物体的交换</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> a=<span class=\"string\">&#x27;B&#x27;</span>;<span class=\"comment\">//一个盒子里放着篮球</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> b=<span class=\"string\">&#x27;A&#x27;</span>;<span class=\"comment\">//另一个盒子里放着足球</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> temp=<span class=\"string\">&#x27;0&#x27;</span>;<span class=\"comment\">//有一个空盒子</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//使用一下三步完成交换</span></span><br><span class=\"line\">\tswap(a,b);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//把盒子里的球倒出来看看</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;box a:%c box b:%c\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;在这里给出输出&#x3D;&#x3D;</p>\n<p>可以看出输出不对, 盒子里的球并没有被交换</p>\n<p>为什么会这样?<br>原因在与swap函数</p>\n<blockquote>\n<p>[!NOTE] 函数的形式参数和实际参数<br>对于函数的参数：<br>在声明和定义时写在函数参数列表中的参数是形式上的参数, 起到占位置的作用, 所以叫形式参数, 简称形参.</p>\n<p>形参在你调用函数时告诉你这里应当填什么样的数据.</p>\n<p>在调用函数时, 写入到参数列表的参数才是实际用到的参数, 称为实际参数, 简称实参.</p>\n</blockquote>\n<p>在这里, 我们把两个参数传入其中, 只是在形参之间换来换去, 没有影响到实参.<br>试想一下, swap这个机器, 伸出两只机械臂, 要求你把篮球和足球放上去, 于是你另外拿了两个球给它, 它把球左手倒右手一换, 对你手上两个的盒子和其中的内容却没有任何影响.</p>\n<p>请注意, 我们的要实现交换两个球的目的, 不只要关心这两个球之间的关系, 还要关心球与盒子之间的关系, 一共是四个元素而不是两个元素.</p>\n<p>那么有没有一种东西, 既可以操作盒子, 又可以操作盒子中的内容呢?</p>\n<p>你好, 有的, 兄弟, 有的! 看一下指针吧, 兄弟!<br>指针本体可以操作盒子, 通过解引用操作可以操作盒子内的物品, 两个要求, 一次满足, 简直太完美了.</p>\n<p>于是就可以实现一个新的swap函数:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">new_swap</span><span class=\"params\">(<span class=\"type\">char</span> * a, <span class=\"type\">char</span> * b)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> temp = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttemp = *a;</span><br><span class=\"line\">\t*a = *b;</span><br><span class=\"line\">\t*b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//由于参数是两个指针, 因此调用函数传入参数时要注意使用取地址运算符传入地址</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> a=<span class=\"string\">&#x27;B&#x27;</span>;<span class=\"comment\">//一个盒子里放着篮球</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> b=<span class=\"string\">&#x27;A&#x27;</span>;<span class=\"comment\">//另一个盒子里放着足球</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> temp=<span class=\"string\">&#x27;0&#x27;</span>;<span class=\"comment\">//有一个空盒子</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//使用一下三步完成交换</span></span><br><span class=\"line\">\tswap(&amp;a,&amp;b);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//把盒子里的球倒出来看看</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;box a:%c box b:%c\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-指针和内存空间\"><a href=\"#2-指针和内存空间\" class=\"headerlink\" title=\"2. 指针和内存空间\"></a>2. 指针和内存空间</h2><h3 id=\"2-1-不同类型数据占据的存储空间\"><a href=\"#2-1-不同类型数据占据的存储空间\" class=\"headerlink\" title=\"2.1 不同类型数据占据的存储空间\"></a>2.1 不同类型数据占据的存储空间</h3><p> 为了合理的存储不同大小的数据, 既不浪费, 也不溢出, 有不同数据类型.<br> 为了应对不同的数据类型, 指针也有了不同的类型. 但是指针的类型和数据类型有一些区别.</p>\n<p>我们知道, 不同数据类型的本质区别就是占据的空间大小不同.</p>\n<p><img data-src=\"https://fuyunyou-note.oss-cn-wuhan-lr.aliyuncs.com/typora-user-images/202502071351935.png\" alt=\"image.png\"></p>\n<p>&#x3D;&#x3D;(此处给出数据类型大小表格)&#x3D;&#x3D;</p>\n<p>我们使用<code>sizeof()</code>运算符可以计算数据的大小, sizeof的用法类似函数(但它实际上不是参数而是运算符), 括号中传入参数, 返回一个数字(该返回值的类型为size_t) 表示传入的参数的占据空间大小, 以字节为单位.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of char:%d&quot;</span>,<span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>));</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of short:%d&quot;</span>,<span class=\"keyword\">sizeof</span>(<span class=\"type\">short</span>));</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of int:%d&quot;</span>,<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br></pre></td></tr></table></figure>\n\n<p>照这样来看数组应该根据存储数据类型的不同, 拥有不同的大小, 然而事实却不是这样. 一般来说, 指针拥有固定的大小.<br>原因也很简单, 指针存储的是地址, 所有的地址都是同一类型的数据, 不论是char还是int, 都是地址. 所以占据的大小都是相同的.</p>\n<p>那么可以说所有的指针都是同一类型的数据吗?<br>当然不能.<br>虽然指针本身所占的空间大小相同, 但其中包含的地址所指向的数据本身却是不同的.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> * char_ptr;</span><br><span class=\"line\"><span class=\"type\">short</span> * short_ptr;</span><br><span class=\"line\"><span class=\"type\">int</span> * int_ptr;</span><br></pre></td></tr></table></figure>\n<p>以上的数据声明中, 有<code>char *, short *, int *</code> 三种不同类型的数据, 可以这样理解, 其中的<code>*</code>(解引用运算符)表示这三者都是指针, 而char, short, int表示其中存储的数据的不同类型. 这两个方面的信息共同构成了指针的类型.<br>当计算机根据指针中存储的地址找到所在位置之后, 通过声明指针变量是给出char, int或其他数据类型的信息决定取一个字节或四个字节的数据.</p>\n<blockquote>\n<p>[!info] <code>void</code> 类型 和<code>void*</code> 类型<br><code>void</code> 表示无类型，不能直接用来定义变量，如<code>void x=0;</code>这条语句是不合法的。用在函数头的返回值或参数列表中，表示函数无参或无返回值。如<code>void func(void)</code>，表示一个既无参数有无返回值的函数。<br> <code>void*</code>表示无类型指针，可以用来定义变量，<code>void* ptr=&amp;x;</code>该语句是合法的。<code>void*</code>是为了满足一些函数的适配性而设计的（即泛型编程），例如，设计一个函数<code>long sumof(int a,int b)</code>用于计算两个数之和，因为不能确定要计算的两个数的大小，如果给出的参数超出了<code>int</code>类型的限制就会产生意想不到的结果。将其修改为<code>void* sumof(void* a,void* b,DATA_TYPE type)</code>，不论数据有多大，先接受了再说，同时传入数据类型，根据数据类型，在函数中采用不同的处理方式即可。</p>\n<p> 为何<code>void</code>不可以直接用于定义变量而<code>void*</code>可以？<br> <code>void*</code>归根到底是一个指针，用该类型定义变量编译器知道用多少内存来存储该变量，因为一台机器上的指针类型大小是固定的。而对于<code>void</code>类型的变量，编译器不知道该使用多大的内存来存储，因此无法直接定义变量。相应的，由于<code>void*</code>类型没有数据类型，因此不能直接对<code>void*</code>指针直接解引用，也不能直接使用<code>++</code>运算符。例如，语句<code>int a=0; void* ptr = &amp;a; b=*ptr</code>和<code>void* ptr=&amp;a; ptr++;</code>都是不合法的。</p>\n</blockquote>\n<h3 id=\"2-2-寻址空间和指针大小\"><a href=\"#2-2-寻址空间和指针大小\" class=\"headerlink\" title=\"2.2 寻址空间和指针大小\"></a>2.2 寻址空间和指针大小</h3><p>我们知道指针的大小一般都是相同的，那么会是多大呢？可以使用<code>sizeof()</code>运算符测算</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> b=<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">float</span> c=<span class=\"number\">1.1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> *ptr1=&amp;a;</span><br><span class=\"line\"><span class=\"type\">char</span> *ptr2=&amp;b;</span><br><span class=\"line\"><span class=\"type\">float</span> *ptr3=&amp;c;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of ptr1 = %d\\n&quot;</span>,<span class=\"keyword\">sizeof</span>(ptr1));</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of ptr2 = %d\\n&quot;</span>,<span class=\"keyword\">sizeof</span>(ptr2));</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of ptr3 = %d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(ptr3));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">size of ptr1 = <span class=\"number\">8</span></span><br><span class=\"line\">size of ptr2 = <span class=\"number\">8</span></span><br><span class=\"line\">size of ptr3 = <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n\n\n<p>大部分情况下, 结果都会是8. 这表示指针类型占据8字节空间大小.</p>\n<p>指针占据的空间是由CPU的寻址位数所决定的,  CPU的寻址位数决定了其能够访问的内存地址的范围，也决定了指针变量能够存储的地址值的位数。例如，在32位机器上，地址是由32个0或1的二进制序列组成，因此指针大小通常是4个字节（因为1个字节&#x3D;8比特位，32比特位&#x3D;4个字节）。而在64位机器上，地址需要64个0或1的二进制序列组成，因此指针大小通常是8个字节。</p>\n<p>当然cpu寻址位数并不是唯一的决定因素, 编译器的编译方式, 虚拟化技术的使用等其他原因可能导致指针大小与实际的CPU不匹配.</p>\n<p>cpu的寻址位数, 另一种说法, 也就是cpu的地址总线宽度, 决定了系统的地址空间的大小.</p>\n<p>我们在一些软件的release版本中经常能看见x86和x64后缀.</p>\n<p>x86是一种32位处理器架构，它广泛被应用于早期的计算机系统中。由于历史原因和广泛的兼容性，许多旧的软件和操作系统仍然基于x86架构。x86架构的处理器能够支持的内存寻址范围为2^32（约4GB），这在一定程度上限制了其在处理大数据和复杂计算任务时的能力。然而，对于许多日常应用和旧版软件来说，x86架构仍然足够满足需求。</p>\n<p>相比之下，x64（也称为x86-64或AMD64）是一种64位处理器架构，它提供了更大的内存寻址范围和更高的计算能力。x64架构的处理器能够支持的内存寻址范围为2^64（实际限制通常为16EB，即160亿GB），这使得它能够轻松应对大数据处理和复杂计算任务。此外，x64架构还向下兼容32位应用程序，这意味着用户可以在64位操作系统上运行旧的32位软件。</p>\n<p>因此，当软件的release版本后缀带有x86或x64时，这表示该软件分别针对32位或64位的处理器架构进行了优化。用户应该根据自己的操作系统和硬件平台选择合适的版本进行安装。如果你的操作系统是64位的，并且你的计算机硬件支持x64架构，那么建议选择x64版本的软件以获得更好的性能和兼容性。如果你的操作系统或硬件平台是32位的，或者你需要运行一些只能在32位环境下运行的旧版软件，那么你可能需要选择x86版本的软件。</p>\n<p>&#x3D;&#x3D;(推书) 汇编语言–王爽&#x3D;&#x3D;</p>\n<h3 id=\"2-3-数据的存储方式\"><a href=\"#2-3-数据的存储方式\" class=\"headerlink\" title=\"2.3 数据的存储方式\"></a>2.3 数据的存储方式</h3><h4 id=\"2-3-1-问题的引入\"><a href=\"#2-3-1-问题的引入\" class=\"headerlink\" title=\"2.3.1 问题的引入\"></a>2.3.1 问题的引入</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> int_data=<span class=\"number\">0x12345678</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> * char_ptr=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">char_ptr = (<span class=\"type\">char</span> *)(&amp;int_data);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0x%x&quot;</span>,*char_ptr);</span><br></pre></td></tr></table></figure>\n<p>以上示例输出内容是什么?</p>\n<p>在不同的平台上,  输出内容会有差别, 大部分人在PC上应该输出的是0x78, 而在一些特定平台, 则会输出0x12.</p>\n<p>原因是什么?</p>\n<p>先看看以上操作在干嘛,  定义一个<code>int</code>类型的变量, 取这个变量的地址, 强制类型转换成<code>char*</code>类型的指针, 并通过指针来访问该地址的内容.</p>\n<p>还记得我说的指针的类型的含义吗, <code>char *</code> 表示在数组存储的地址上访问<code>sizeof(char)</code> 大小的字节数目(1个字节), <code>int *</code>表示在数组存储的地址上访问<code>sizeof(int)</code> 大小的字节数目(一般为4个字节).</p>\n<p>也就是说, 原本的四字节大小的int_data通过这种访问方式被截断为一个字节</p>\n<p>在定义时, int_data被赋值为<code>0x12345678</code>, 其中<code>0x</code>表示其后的数据是16进制格式, 也就是说, 刚巧12,34,56,78分别各是一个字节<br>0x12&#x3D;0b 0001 0010 , 其他字节内容类似.</p>\n<p>接下来就是最关键的问题: 在四个字节的内容被裁剪为一个字节的情况下, 哪个字节会被返回?</p>\n<h4 id=\"2-3-2-字节序和存储模式\"><a href=\"#2-3-2-字节序和存储模式\" class=\"headerlink\" title=\"2.3.2 字节序和存储模式\"></a>2.3.2 字节序和存储模式</h4><p>从直觉来看, 最开始的12和最末尾的78应该是最有可能的, 结果也是符合直觉的.</p>\n<p>再来看一看这个数: 12 34 56 78.<br>我们读这个数是从12开始, 而这个数的最低位是78, 如果把这个数看成10进制,则 8是个位, 7是十位, 虽然16进制没有个位十位的说法, 但是原理是类似的, 8是最低位, 7是次低位.<br>78是最低字节(LSB, least significant byte), 相应的, 12是最高字节(MSB, most significant byte). 字节的高低称作字节序</p>\n<p>不论一个数是按照十进制还是十六进制, 或是二进制, 八进制等等, 数字总有其排列顺序.</p>\n<p>数中的字节讲顺序, 计算机里的存储也讲顺序, 计算机内存按照地址进行编号, 从0开始到虚拟地址空间的最大值, 依次增加, 数据依次存储在其中. 0x1000是低地址, 0x1003是高地址</p>\n<p>根据字节序的存储地址不同, 可以分为两种存储模式</p>\n<ol>\n<li><strong>大端存储</strong>：在大端存储模式下，数据的高字节（或称作高位、最重要字节）被存储在内存的低地址处，而数据的低字节（或称作低位、最不重要字节）存储在高地址处。这意味着当你从低地址向高地址读取内存时，数据会按照从高到低的顺序出现。例如，对于十六进制数0x1234，在大端模式下，内存中的布局就是0x12在前（低地址），0x34在后（高地址）。</li>\n<li><strong>小端存储</strong>：在小端存储模式下，数据的低字节存储在内存的低地址处，而高字节存储在高地址处。也就是说，当你从低地址开始读取时，最先读到的是数据的低字节，然后才是高字节。对于相同的十六进制数0x1234，在小端模式下，内存布局会是0x34在前（低地址），0x12在后（高地址）。</li>\n</ol>\n<p>于是, 对于0x12345678</p>\n<ol>\n<li><strong>在大端存储模式下</strong>：<ul>\n<li><code>int_data</code>的内存布局（从低地址到高地址）将是：<code>0x12</code>, <code>0x34</code>, <code>0x56</code>, <code>0x78</code>。</li>\n<li><code>char_ptr</code>指向<code>int_data</code>的第一个字节，即<code>0x12</code>。</li>\n<li>因此，<code>printf(&quot;%x&quot;, *char_ptr);</code>将输出<code>12</code>。</li>\n</ul>\n</li>\n<li><strong>在小端存储模式下</strong>：<ul>\n<li><code>int_data</code>的内存布局（从低地址到高地址）将是：<code>0x78</code>, <code>0x56</code>, <code>0x34</code>, <code>0x12</code>。</li>\n<li><code>char_ptr</code>指向<code>int_data</code>的第一个字节，即<code>0x78</code>。</li>\n<li>因此，<code>printf(&quot;%x&quot;, *char_ptr);</code>将输出<code>78</code>。</li>\n</ul>\n</li>\n</ol>\n<p>因此，该代码在大端存储模式下输出<code>12</code>，在小端存储模式下输出<code>78</code>。</p>\n<p>[[C语言指针系列图解.excalidraw]]</p>\n<p>使用以下方式可以判断机器是那种存储方式?</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*(<span class=\"type\">char</span> *)&amp;num == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Little-endian\\n&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Big-endian\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>[!note] 注意<br>你应当注意到了, 不论指针所指向的数据占据的内存空间有多大, 它总是指向数据占据的最低地址, 这一点在数组中也是适用的, 具体会在接下来的<code>3.指针与数组</code>部分详解.</p>\n</blockquote>\n<h2 id=\"3-指针和数组\"><a href=\"#3-指针和数组\" class=\"headerlink\" title=\"3. 指针和数组\"></a>3. 指针和数组</h2><h3 id=\"3-1-使用指针操作数组\"><a href=\"#3-1-使用指针操作数组\" class=\"headerlink\" title=\"3.1 使用指针操作数组\"></a>3.1 使用指针操作数组</h3><p>数组被用来存储一系列相同类型的数据</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">10</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>对于数组的基本用法这里不多赘述, 如果不了解建议补充一下基础知识.</p>\n<p>我们知道, 数组通过数组下标取数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> x=a[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<p>取数组的第一个元素赋值给变量x.</p>\n<p>然而还有另一种用法, 数组名是一个相应类型的指针.</p>\n<p>以上例子中, <code>a</code>可以直接赋值给<code>int *</code>类型的指针使用，且是一个合法地址。该地址是数组第一个元素的地址。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> * int_ptr=a;</span><br></pre></td></tr></table></figure>\n<p>以上写法, 编译既不会报错, 也不会警告. 是合法合规而且经常使用的写法.</p>\n<p>于是, 对于数组的元素的访问, 可以有两种不同的方式完成.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">10</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> data1=a[<span class=\"number\">0</span>];<span class=\"comment\">//访问第一个数组元素</span></span><br><span class=\"line\"><span class=\"type\">int</span> data2=*(a+<span class=\"number\">1</span>);<span class=\"comment\">//访问第一个数组元素之后的一个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;data1:%d&quot;</span>,data1);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;data2:%d&quot;</span>,data2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出:</span></span><br><span class=\"line\">data1:<span class=\"number\">1</span></span><br><span class=\"line\">data2:<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指针运算\"><a href=\"#指针运算\" class=\"headerlink\" title=\"指针运算\"></a>指针运算</h3><p>以上代码涉及到一个新的操作：指针运算<br>仔细观察其中的写法,：<code>*(a+1)</code>, 表示a增加“1”, 然后解引用。</p>\n<p>一般来说, “加1”操作是直接作用在数值上的，加上1就是数值变大1，但是对于指针来说, 这个<code>1</code>不是大小上的1, 而是单位<code>1</code>.<br>这里的单位1为指针存储的类型所占的字节数。</p>\n<p>之前讲解过, 对于<code>char *</code>,<code>int*</code>等不同类型的指针的含义:</p>\n<p>“<code>char *</code> 表示在数组存储的地址上访问<code>sizeof(char)</code> 大小的字节数目(1个字节), <code>int *</code>表示在数组存储的地址上访问<code>sizeof(int)</code> 大小的字节数目(一般为4个字节)”</p>\n<p>对于<code>char *</code>类型的数据, 自增以<code>char</code>类型的大小为单位1, 其值就是1个字节.<br>假设<code>char * char_ptr=0x1000</code> 那么<code>char_ptr+1</code>后, 其值为<code>0x1001</code>. 而如果是<code>int_ptr+1</code>, 其值为<code>0x1004</code>. 其他类型与此相似.</p>\n<p>&#x3D;&#x3D;(在这里给出数组数据在内存中的排列)&#x3D;&#x3D;<br>[[C语言指针系列图解.excalidraw]]</p>\n<p>指针运算的这种设计极好的契合了数组操作, 数组各个元素可以直接依照自增取数.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">10</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,*(a+i));</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,a[i]);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上两种写法都能遍历数组</p>\n<blockquote>\n<p>[!error] 数组名和指针的区别<br>看了以上的内容，你可能会认为数组名就是一个指向数组首元素地址的指针，并完全把它当作指针来使用。但数组名不是一个指针，和不能混为一谈。请看如下示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"type\">int</span> arr[<span class=\"number\">5</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">&gt;<span class=\"type\">int</span> a=*(arr++);</span><br><span class=\"line\">&gt;<span class=\"comment\">//报错：error: lvalue required as increment operand</span></span><br></pre></td></tr></table></figure>\n<p>以上代码中<code>arr++</code>操作是不合法的，编译报错的意思是说<code>++</code>运算符需要一个左值作为其操作数，虽然数组名是一个左值，但不是一个可以修改的左值。这样是有原因的，数组名作为一个数组的标识（symbol）应该永远指向数组的首地址，不应被任何操作更改，这样才能保证对数组任意元素的正常访问。<br>那么为什么<code>arr+1</code>这样的操作是合法的？<br>原因是”+1“操作不会改变arr本身的值，arr+1这样的表达式最终的结果是一个右值，终究是要赋值给某个变量或作为其他运算符的操作数使用。无论是哪种情况，都不会影响arr中存储的值。</p>\n</blockquote>\n<h3 id=\"3-2-数组到指针的退化\"><a href=\"#3-2-数组到指针的退化\" class=\"headerlink\" title=\"3.2 数组到指针的退化\"></a>3.2 数组到指针的退化</h3><p>在 C&#x2F;C++ 中，​<strong>数组到指针的退化（array-to-pointer decay）​</strong>​ 是一个重要的隐式转换机制，它决定了数组名在大多数情况下如何被自动转换为指针。理解这个概念对掌握 C&#x2F;C++ 的指针和数组操作至关重要。</p>\n<hr>\n<h4 id=\"​1-什么是数组到指针的退化？​​\"><a href=\"#​1-什么是数组到指针的退化？​​\" class=\"headerlink\" title=\"​1. 什么是数组到指针的退化？​​\"></a>​<strong>1. 什么是数组到指针的退化？​</strong>​</h4><ul>\n<li>​<strong>数组名 <code>arr</code> 在大多数表达式中会自动转换为指向其首元素的指针</strong>。</li>\n<li>这种转换是隐式的（编译器自动完成），称为 ​<strong>​”退化（decay）”​</strong>。</li>\n<li>退化后，数组名 <code>arr</code> 不再代表整个数组，而是变成一个指向 <code>arr[0]</code> 的指针（类型 <code>T*</code>，其中 <code>T</code> 是数组元素的类型）。</li>\n</ul>\n<p>​<strong>示例</strong>​</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> *p = arr;  <span class=\"comment\">// 数组名 arr 退化为 int* 指针</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>arr</code> 原本是一个 <code>int[5]</code> 类型的数组，但在赋值给 <code>p</code> 时，它退化为 <code>int*</code> 类型（指向 <code>arr[0]</code>）。</li>\n</ul>\n<hr>\n<h4 id=\"​2-何时发生数组到指针的退化？​​\"><a href=\"#​2-何时发生数组到指针的退化？​​\" class=\"headerlink\" title=\"​2. 何时发生数组到指针的退化？​​\"></a>​<strong>2. 何时发生数组到指针的退化？​</strong>​</h4><p>数组名在以下情况下会退化为指针：</p>\n<ol>\n<li><p>​<strong>作为函数参数传递时</strong>​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">int</span> *p)</span>;  <span class=\"comment\">// 函数接受指针</span></span><br><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">func(arr);  <span class=\"comment\">// arr 退化为 int* 指针</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>即使函数声明为 <code>void func(int p[5])</code>，<code>p</code> 仍然会被当作 <code>int*</code> 处理（数组语法只是语法糖）。</li>\n</ul>\n</li>\n<li><p>​<strong>在算术运算（<code>+</code>, <code>-</code>, <code>++</code>, <code>--</code>）中</strong>​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> *p = arr + <span class=\"number\">1</span>;  <span class=\"comment\">// arr 退化为指针，然后 +1 运算</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>​<strong>在 <code>[]</code> 运算符中</strong>​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> val = arr[<span class=\"number\">2</span>];  <span class=\"comment\">// 等价于 *(arr + 2)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>​<strong>在比较运算 （ <code>!=</code>, <code>&lt;</code>, <code>&gt;</code> 等）中</strong>​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (arr == <span class=\"literal\">NULL</span>) &#123; ... &#125;  <span class=\"comment\">// arr 退化为指针</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>​<strong>在初始化指针时</strong>​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> *p = arr;  <span class=\"comment\">// arr 退化为指针</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h4 id=\"​3-何时不会发生退化？​​\"><a href=\"#​3-何时不会发生退化？​​\" class=\"headerlink\" title=\"​3. 何时不会发生退化？​​\"></a>​<strong>3. 何时不会发生退化？​</strong>​</h4><p>数组名在以下情况下<strong>不会退化为指针</strong>，仍然保持数组类型：</p>\n<ol>\n<li><p>​**<code>sizeof(arr)</code>**​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">size_t</span> size = <span class=\"keyword\">sizeof</span>(arr);  <span class=\"comment\">// 返回整个数组的大小（5 * sizeof(int)）</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果 <code>arr</code> 退化为指针，<code>sizeof(arr)</code> 会返回指针的大小（如 4 或 8 字节），而不是数组大小。</li>\n</ul>\n</li>\n<li><p>​**<code>&amp;arr</code>（取数组地址）​**​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> (*ptr_to_array)[<span class=\"number\">5</span>] = &amp;arr;  <span class=\"comment\">// 返回 int(*)[5] 类型（数组指针）</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>&amp;arr</code> 返回的是<strong>指向整个数组的指针</strong>​（<code>int(*)[5]</code>），而不是指向首元素的指针（<code>int*</code>）。</li>\n</ul>\n</li>\n<li><p>​<strong>字符串字面量初始化字符数组时</strong>​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[] = <span class=\"string\">&quot;hello&quot;</span>;  <span class=\"comment\">// str 是数组，不会退化为指针</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h4 id=\"​4-退化后的指针类型​\"><a href=\"#​4-退化后的指针类型​\" class=\"headerlink\" title=\"​4. 退化后的指针类型​\"></a>​<strong>4. 退化后的指针类型</strong>​</h4><ul>\n<li><p>如果 <code>arr</code> 是 <code>T[N]</code> 类型（<code>T</code> 是元素类型，<code>N</code> 是数组大小），则退化后的指针类型是 <code>T*</code>。</p>\n</li>\n<li><p>​<strong>示例</strong>​：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">5</span>];     <span class=\"comment\">// 类型是 int[5]</span></span><br><span class=\"line\"><span class=\"type\">int</span> *p = arr;   <span class=\"comment\">// 退化后 p 的类型是 int*</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h4 id=\"​5-退化与指针算术​\"><a href=\"#​5-退化与指针算术​\" class=\"headerlink\" title=\"​5. 退化与指针算术​\"></a>​<strong>5. 退化与指针算术</strong>​</h4><p>由于退化后的 <code>arr</code> 变成 <code>T*</code>，我们可以对它进行指针算术运算：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> *p = arr;     <span class=\"comment\">// p 指向 arr[0]</span></span><br><span class=\"line\"><span class=\"type\">int</span> *q = p + <span class=\"number\">3</span>;   <span class=\"comment\">// q 指向 arr[3]（即 4）</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>arr + i</code> 等价于 <code>&amp;arr[0] + i</code>，计算的是第 <code>i</code> 个元素的地址。</li>\n</ul>\n<hr>\n<h4 id=\"​6-退化与多维数组​\"><a href=\"#​6-退化与多维数组​\" class=\"headerlink\" title=\"​6. 退化与多维数组​\"></a>​<strong>6. 退化与多维数组</strong>​</h4><p>对于多维数组，退化规则仍然适用，但会逐层退化：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> matrix[<span class=\"number\">3</span>][<span class=\"number\">4</span>];  <span class=\"comment\">// int[3][4] 类型</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>​**<code>matrix</code> 退化为 <code>int(*)[4]</code>**​（指向 <code>int[4]</code> 的指针）。</li>\n<li>​**<code>matrix[0]</code> 退化为 <code>int*</code>**​（指向 <code>int</code> 的指针）。</li>\n</ul>\n<p> ​<strong>示例</strong>​</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> (*p)[<span class=\"number\">4</span>] = matrix;  <span class=\"comment\">// p 指向 matrix[0]（int[4] 类型）</span></span><br><span class=\"line\"><span class=\"type\">int</span> *q = matrix[<span class=\"number\">0</span>];    <span class=\"comment\">// q 指向 matrix[0][0]（int 类型）</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"​7-退化带来的问题​\"><a href=\"#​7-退化带来的问题​\" class=\"headerlink\" title=\"​7. 退化带来的问题​\"></a>​<strong>7. 退化带来的问题</strong>​</h4><p>由于退化是隐式的，可能会导致一些意外的行为：</p>\n<p> ​<strong>​(1) 数组大小信息丢失</strong>​</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">int</span> *p)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 无法知道 p 指向的数组有多大！</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">func(arr);  <span class=\"comment\">// 退化后，func 不知道 arr 的大小</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>​<strong>解决方案</strong>​：显式传递数组大小：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">int</span> *p, <span class=\"type\">size_t</span> size)</span>;</span><br><span class=\"line\">func(arr, <span class=\"keyword\">sizeof</span>(arr)/<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p> ​**​(2) 不能对退化后的指针使用 <code>sizeof</code>**​</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> *p = arr;</span><br><span class=\"line\"><span class=\"type\">size_t</span> s1 = <span class=\"keyword\">sizeof</span>(arr);  <span class=\"comment\">// 20（假设 int 是 4 字节）</span></span><br><span class=\"line\"><span class=\"type\">size_t</span> s2 = <span class=\"keyword\">sizeof</span>(p);    <span class=\"comment\">// 4 或 8（指针的大小）</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>sizeof(arr)</code> 返回整个数组的大小，但 <code>sizeof(p)</code> 返回指针的大小。</li>\n</ul>\n<hr>\n<h4 id=\"​8-如何避免退化？​​\"><a href=\"#​8-如何避免退化？​​\" class=\"headerlink\" title=\"​8. 如何避免退化？​​\"></a>​<strong>8. 如何避免退化？​</strong>​</h4><p>如果希望保留数组类型（防止退化），可以使用：</p>\n<ol>\n<li><p>​<strong>引用传递（C++）​</strong>​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">int</span> (&amp;arr)[<span class=\"number\">5</span>])</span>;  <span class=\"comment\">// 接受 int[5] 类型的引用</span></span><br><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">func(arr);  <span class=\"comment\">// 不会退化</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这样 <code>sizeof(arr)</code> 在函数内部仍然有效。</li>\n</ul>\n</li>\n<li><p>​<strong>使用 <code>std::array</code>（C++）​</strong>​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;array&gt;</span></span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"type\">int</span>, <span class=\"number\">5</span>&gt; arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>std::array</code> 是 C++ 的容器，不会退化。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"​9-总结​\"><a href=\"#​9-总结​\" class=\"headerlink\" title=\"​9. 总结​\"></a>​<strong>9. 总结</strong>​</h4><table>\n<thead>\n<tr>\n<th>​<strong>关键点</strong>​</th>\n<th>​<strong>说明</strong>​</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>​<strong>什么是退化？​</strong>​</td>\n<td>数组名 <code>arr</code> 在大多数情况下隐式转换为 <code>&amp;arr[0]</code>（指针）。</td>\n</tr>\n<tr>\n<td>​<strong>何时发生？​</strong>​</td>\n<td>函数传参、指针运算、<code>[]</code> 操作、比较运算等。</td>\n</tr>\n<tr>\n<td>​<strong>何时不发生？​</strong>​</td>\n<td><code>sizeof(arr)</code>, <code>&amp;arr</code>, 初始化字符数组时。</td>\n</tr>\n<tr>\n<td>​<strong>退化后的类型</strong>​</td>\n<td><code>T[N]</code> → <code>T*</code>（指向首元素的指针）。</td>\n</tr>\n<tr>\n<td>​<strong>多维数组退化</strong>​</td>\n<td><code>int[3][4]</code> → <code>int(*)[4]</code>（指向行的指针）。</td>\n</tr>\n<tr>\n<td>​<strong>退化的问题</strong>​</td>\n<td>丢失数组大小信息，<code>sizeof</code> 行为不同。</td>\n</tr>\n<tr>\n<td>​<strong>如何避免？​</strong>​</td>\n<td>使用引用（C++）或 <code>std::array</code>（C++）。</td>\n</tr>\n</tbody></table>\n<p>理解 ​<strong>array-to-pointer decay</strong>​ 能帮助你更好地掌握 C&#x2F;C++ 的数组和指针操作，避免常见的陷阱！ 🚀</p>\n<h3 id=\"3-3-在数组中使用sizeof\"><a href=\"#3-3-在数组中使用sizeof\" class=\"headerlink\" title=\"3.3 在数组中使用sizeof()\"></a>3.3 在数组中使用sizeof()</h3><p>有如下代码示例，尝试运行，看看结果和你想的是否相同:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> *ptr=arr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of arr:%d&quot;</span>,<span class=\"keyword\">sizeof</span>(arr));</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of ptr:%d&quot;</span>,<span class=\"keyword\">sizeof</span>(ptr));</span><br></pre></td></tr></table></figure>\n\n\n<p>继续来看遍历数组的例子</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[]=&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">35</span>,<span class=\"number\">624</span>,<span class=\"number\">546</span>,<span class=\"number\">31</span>,<span class=\"number\">0</span>,<span class=\"number\">46</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> arr_size=<span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;arr_size;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,*(a+i));</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,a[i]);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>遍历数组是, for循环的终止条件是数组的长度.<br>直接在循环中写出数组长度的数字是一种不推荐的写法, 有几个缺点:</p>\n<ol>\n<li>对于明确给出长度的数组, 我们可以直接知道它的长度, 但对于没有给出长度的数组, 不能一眼看出它的长度.</li>\n<li>直接在for循环中使用数组长度的数字,  是一种硬编码方式, 如果要改动数组大小, 那么每一个在程序中用到的数组遍历操作都要更改代码, 非常麻烦.</li>\n</ol>\n<p>更推荐使用的方法是使用sizeof()运算符:<br>具体操作如下:<br><code>arr_size = sizeof(arr_name)/sizeof(data_type)</code></p>\n<p><code>sizeof(arr_name)</code>计算数组的所有元素占据的字节数, <code>sizeof(data_type)</code>计算数组每个元素占据的字节数. 两个数一除, 就能算出数组大小.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用以上方法遍历数组</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a[]=&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">35</span>,<span class=\"number\">624</span>,<span class=\"number\">546</span>,<span class=\"number\">31</span>,<span class=\"number\">0</span>,<span class=\"number\">46</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"keyword\">sizeof</span>(a)/<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>);i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,*(a+i));</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,a[i]);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"sizeof和strlen的区别\"><a href=\"#sizeof和strlen的区别\" class=\"headerlink\" title=\"sizeof和strlen的区别\"></a>sizeof和strlen的区别</h4><p>在以上示例中提到了数组的一个用法: 即使用字符数组存储字符串. 对于这样的字符串既可以使用sizeof()获取其长度, 也可以使用strlen()<br>来看一下sizeof和strlen的区别:</p>\n<h4 id=\"1-定义与性质\"><a href=\"#1-定义与性质\" class=\"headerlink\" title=\"1. 定义与性质\"></a>1. 定义与性质</h4><ol>\n<li><p><strong>sizeof</strong></p>\n<ul>\n<li>性质：是C&#x2F;C++中的一个运算符，用于计算变量或数据类型所占的内存大小。</li>\n<li>返回值：其返回值是size_t类型，表示某种类型或对象的字节数。</li>\n<li>计算时机：sizeof是在编译时计算的，而不是运行时，这使得它非常高效。</li>\n</ul>\n</li>\n<li><p><strong>strlen</strong></p>\n<ul>\n<li>性质：是C语言标准库中的一个函数，用于计算字符串的长度。</li>\n<li>语法：<code>size_t strlen(const char *str);</code></li>\n<li>参数：str表示要计算长度的字符串，以’\\0’结尾的字符指针。</li>\n<li>返回值：返回字符串str的字符数量，不包含’\\0’结尾字符。</li>\n<li>计算时机：strlen的结果是在运行时计算出来的。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"2-使用场景与限制\"><a href=\"#2-使用场景与限制\" class=\"headerlink\" title=\"2. 使用场景与限制\"></a>2. 使用场景与限制</h4><ol>\n<li><p><strong>sizeof</strong></p>\n<ul>\n<li>可以用于数据类型、变量、数组、结构体等，返回它们在内存中的大小，单位是字节。</li>\n<li>对于数组，sizeof可以直接给出数组所占用的内存大小。但需要注意，当数组作为函数参数传递时，它会被退化为指针，此时使用sizeof来计算数组的大小将返回指针的大小，而不是数组的实际大小。</li>\n<li>对于指针，sizeof返回的是指针本身的大小，而不是它所指向的内容的大小。</li>\n</ul>\n</li>\n<li><p><strong>strlen</strong></p>\n<ul>\n<li>只能用于计算以’\\0’结尾的字符串的长度。</li>\n<li>如果字符串没有以’\\0’结尾，strlen的行为是未定义的，可能会继续计算直到遇到内存中的某个’\\0’字符为止。</li>\n<li>strlen的参数必须是char*类型的指针，不能用于其他数据类型。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"3-示例对比\"><a href=\"#3-示例对比\" class=\"headerlink\" title=\"3. 示例对比\"></a>3. 示例对比</h4><p>以下是一个简单的示例，用于说明sizeof和strlen在实际编程中的使用：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> str[] = <span class=\"string\">&quot;Hello, World!&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *ptr = str;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Sizeof str: %zu bytes\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(str));  <span class=\"comment\">// 输出数组的大小，包括结尾的&#x27;\\0&#x27;</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Sizeof ptr: %zu bytes\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(ptr));  <span class=\"comment\">// 输出指针的大小</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Strlen of str: %zu\\n&quot;</span>, <span class=\"built_in\">strlen</span>(str));     <span class=\"comment\">// 输出字符串的长度，不包括结尾的&#x27;\\0&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，<code>sizeof(str)</code>返回的是数组<code>str</code>所占用的内存大小，包括结尾的’\\0’字符；而<code>sizeof(ptr)</code>返回的是指针<code>ptr</code>本身所占用的内存大小，与它所指向的字符串的长度无关。<code>strlen(str)</code>则返回的是字符串<code>str</code>的长度，不包括结尾的’\\0’字符。</p>\n<h2 id=\"4-指针和结构体\"><a href=\"#4-指针和结构体\" class=\"headerlink\" title=\"4. 指针和结构体\"></a>4. 指针和结构体</h2><h3 id=\"4-1-基本用法\"><a href=\"#4-1-基本用法\" class=\"headerlink\" title=\"4.1 基本用法\"></a>4.1 基本用法</h3><p>使用结构体可以把相关的数据有逻辑的组合在一起, 并通过<code>结构体名称+ .</code>来引用结构体中的变量</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span> <span class=\"comment\">// 包含strcpy函数的头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> id;         <span class=\"comment\">// 学生学号</span></span><br><span class=\"line\">    <span class=\"type\">char</span> name[<span class=\"number\">50</span>];  <span class=\"comment\">// 学生姓名</span></span><br><span class=\"line\">    <span class=\"type\">float</span> score;    <span class=\"comment\">// 学生成绩</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> <span class=\"title\">stu</span>;</span><span class=\"comment\">//创建一个Student类型的数据stu</span></span><br><span class=\"line\">\tstu.id=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(stu.name, <span class=\"string\">&quot;zhangsan&quot;</span>); <span class=\"comment\">// 使用strcpy函数复制字符串</span></span><br><span class=\"line\">\tstu.score=<span class=\"number\">85.0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出结构体和数组是很像的, 都是用来存储一系列数据的. 二者的区别在于同一结构体中可以包含不同数据类型的数据, 而一个数组中所有数据的数据类型都相同<br>结构体中也可以包含数组作为其元素, 如上所示, <code>char name[50]</code>是用于存储学生姓名的数组.</p>\n<p><strong>通过typedef为结构体起一个别名</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用typedef定义一个结构体,为其起一个别名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//写法1:</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> id;        <span class=\"comment\">// 学生学号</span></span><br><span class=\"line\">    <span class=\"type\">char</span> name[<span class=\"number\">50</span>]; <span class=\"comment\">// 学生姓名</span></span><br><span class=\"line\">    <span class=\"type\">float</span> score;   <span class=\"comment\">// 学生成绩</span></span><br><span class=\"line\">&#125; Stu;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">起别名后可以一直使用别名,于是结构体原本的名字可以省略掉</span></span><br><span class=\"line\"><span class=\"comment\">写法2:</span></span><br><span class=\"line\"><span class=\"comment\">typedef struct</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int id;        // 学生学号</span></span><br><span class=\"line\"><span class=\"comment\">    char name[50]; // 学生姓名</span></span><br><span class=\"line\"><span class=\"comment\">    float score;   // 学生成绩</span></span><br><span class=\"line\"><span class=\"comment\">&#125; Stu;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以上两种写法是一样的</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Stu stu; <span class=\"comment\">// 创建一个Stu类型的数据stu.因为起了别名,此处可以直接使用别名</span></span><br><span class=\"line\">    stu.id = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(stu.name, <span class=\"string\">&quot;zhangsan&quot;</span>); <span class=\"comment\">// 使用strcpy函数复制字符串</span></span><br><span class=\"line\">    stu.score = <span class=\"number\">85.0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-使用指针操作结构体\"><a href=\"#4-2-使用指针操作结构体\" class=\"headerlink\" title=\"4.2 使用指针操作结构体\"></a>4.2 使用指针操作结构体</h3><p>结构体同样可以通过指针来操作</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用typedef定义一个结构体,为其起一个别名</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> id;        <span class=\"comment\">// 学生学号</span></span><br><span class=\"line\">    <span class=\"type\">char</span> name[<span class=\"number\">50</span>]; <span class=\"comment\">// 学生姓名</span></span><br><span class=\"line\">    <span class=\"type\">float</span> score;   <span class=\"comment\">// 学生成绩</span></span><br><span class=\"line\">&#125; Stu;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Stu stu; <span class=\"comment\">// 创建一个Stu类型的数据stu.因为起了别名,此处可以直接使用别名</span></span><br><span class=\"line\">    stu.id = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(stu.name, <span class=\"string\">&quot;zhangsan&quot;</span>); <span class=\"comment\">// 使用strcpy函数复制字符串</span></span><br><span class=\"line\">    stu.score = <span class=\"number\">85.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Stu* ptr_stu;<span class=\"comment\">// 创建一个指向Stu类型的指针ptr_stu</span></span><br><span class=\"line\">    ptr_stu-&gt;id = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(ptr_stu-&gt;name, <span class=\"string\">&quot;zhangsan&quot;</span>); <span class=\"comment\">// 使用strcpy函数复制字符串</span></span><br><span class=\"line\">    ptr_stu-&gt;score = <span class=\"number\">85.0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用指针同样可以操作结构体成员, 使用<code>指针名+ -&gt;</code>运算符即可.</p>\n<p>既然涉及到了指针操作, 那么来看一看结构体在内存中的存储方式吧</p>\n<hr>\n<h4 id=\"1-结构体的存储方式\"><a href=\"#1-结构体的存储方式\" class=\"headerlink\" title=\"1. 结构体的存储方式\"></a><strong>1. 结构体的存储方式</strong></h4><p>结构体在内存中的存储方式是按照其成员变量的声明顺序依次存储的。每个成员变量占用的内存空间取决于其数据类型。例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Example</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> a;    <span class=\"comment\">// 1字节</span></span><br><span class=\"line\">    <span class=\"type\">int</span> b;     <span class=\"comment\">// 4字节</span></span><br><span class=\"line\">    <span class=\"type\">short</span> c;   <span class=\"comment\">// 2字节</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在没有考虑对齐的情况下，结构体的内存布局大致如下：</p>\n<ul>\n<li><p><code>char a</code> 占用1字节。</p>\n</li>\n<li><p><code>int b</code> 占用4字节。</p>\n</li>\n<li><p><code>short c</code> 占用2字节。</p>\n</li>\n</ul>\n<p>因此，结构体的总大小应该是 <code>1 + 4 + 2 = 7</code> 字节。然而，实际的存储方式会受到对齐规则的影响。</p>\n<hr>\n<h4 id=\"2-结构体的对齐方式\"><a href=\"#2-结构体的对齐方式\" class=\"headerlink\" title=\"2. 结构体的对齐方式\"></a><strong>2. 结构体的对齐方式</strong></h4><p>为了提高内存访问效率，编译器通常会对结构体的成员变量进行对齐（alignment）。对齐规则确保每个成员变量的地址是其大小的整数倍。例如，一个4字节的<code>int</code>变量，其地址必须是4的倍数。</p>\n<h5 id=\"2-1-对齐规则\"><a href=\"#2-1-对齐规则\" class=\"headerlink\" title=\"2.1 对齐规则\"></a><strong>2.1 对齐规则</strong></h5><ol>\n<li><p><strong>成员变量对齐</strong>：</p>\n<ul>\n<li><p>每个成员变量的起始地址必须是其自身大小的整数倍。例如：</p>\n<ul>\n<li><p><code>char</code> 类型的变量对齐要求是1字节对齐。</p>\n</li>\n<li><p><code>short</code> 类型的变量对齐要求是2字节对齐。</p>\n</li>\n<li><p><code>int</code> 类型的变量对齐要求是4字节对齐。</p>\n</li>\n<li><p><code>long long</code> 类型的变量对齐要求是8字节对齐。</p>\n</li>\n</ul>\n</li>\n<li><p>如果成员变量的起始地址不符合对齐要求，编译器会在前面插入填充字节（padding）。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>结构体整体对齐</strong>：</p>\n<ul>\n<li><p>结构体的总大小必须是其最大成员变量对齐要求的整数倍。例如，如果结构体中最大的成员变量是4字节对齐的，那么整个结构体的大小必须是4的倍数。</p>\n</li>\n<li><p>如果结构体的总大小不符合对齐要求，编译器会在结构体的末尾插入填充字节。</p>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"3-示例分析\"><a href=\"#3-示例分析\" class=\"headerlink\" title=\"3. 示例分析\"></a><strong>3. 示例分析</strong></h4><p>以之前的结构体为例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Example</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> a;    <span class=\"comment\">// 1字节</span></span><br><span class=\"line\">    <span class=\"type\">int</span> b;     <span class=\"comment\">// 4字节</span></span><br><span class=\"line\">    <span class=\"type\">short</span> c;   <span class=\"comment\">// 2字节</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>假设系统的默认对齐规则如下：</p>\n<ul>\n<li><p><code>char</code>：1字节对齐</p>\n</li>\n<li><p><code>int</code>：4字节对齐</p>\n</li>\n<li><p><code>short</code>：2字节对齐</p>\n</li>\n</ul>\n<h5 id=\"3-1-成员变量对齐\"><a href=\"#3-1-成员变量对齐\" class=\"headerlink\" title=\"3.1 成员变量对齐\"></a><strong>3.1 成员变量对齐</strong></h5><ol>\n<li><p>**<code>char a</code>**：</p>\n<ul>\n<li><p>起始地址：0</p>\n</li>\n<li><p>占用1字节，对齐要求是1字节对齐，因此不需要填充。</p>\n</li>\n</ul>\n</li>\n<li><p>**<code>int b</code>**：</p>\n<ul>\n<li><p>起始地址：4（下一个4字节对齐的地址）</p>\n</li>\n<li><p>占用4字节，对齐要求是4字节对齐。</p>\n</li>\n<li><p>在<code>char a</code>和<code>int b</code>之间插入3个填充字节。</p>\n</li>\n</ul>\n</li>\n<li><p>**<code>short c</code>**：</p>\n<ul>\n<li><p>起始地址：8（下一个2字节对齐的地址）</p>\n</li>\n<li><p>占用2字节，对齐要求是2字节对齐。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"3-2-结构体整体对齐\"><a href=\"#3-2-结构体整体对齐\" class=\"headerlink\" title=\"3.2 结构体整体对齐\"></a><strong>3.2 结构体整体对齐</strong></h5><ul>\n<li><p>结构体的总大小：<code>1（char）+ 3（填充）+ 4（int）+ 2（short）= 10</code> 字节。</p>\n</li>\n<li><p>结构体中最大的成员变量是<code>int</code>，对齐要求是4字节。</p>\n</li>\n<li><p>因此，结构体的总大小必须是4的倍数。</p>\n</li>\n<li><p>在结构体的末尾插入2个填充字节，使得总大小为12字节。</p>\n</li>\n</ul>\n<p>最终，结构体在内存中的布局如下：</p>\n<p>[[C语言指针系列图解.excalidraw]]</p>\n<table>\n<thead>\n<tr>\n<th>地址</th>\n<th>数据</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td><code>char a</code></td>\n<td>成员变量</td>\n</tr>\n<tr>\n<td>1</td>\n<td>填充字节</td>\n<td>对齐<code>int b</code></td>\n</tr>\n<tr>\n<td>2</td>\n<td>填充字节</td>\n<td>对齐<code>int b</code></td>\n</tr>\n<tr>\n<td>3</td>\n<td>填充字节</td>\n<td>对齐<code>int b</code></td>\n</tr>\n<tr>\n<td>4</td>\n<td><code>int b</code></td>\n<td>成员变量</td>\n</tr>\n<tr>\n<td>8</td>\n<td><code>short c</code></td>\n<td>成员变量</td>\n</tr>\n<tr>\n<td>10</td>\n<td>填充字节</td>\n<td>对齐结构体</td>\n</tr>\n<tr>\n<td>11</td>\n<td>填充字节</td>\n<td>对齐结构体</td>\n</tr>\n</tbody></table>\n<p>结构体的总大小为12字节。</p>\n<p>值得注意的是, 改变结构体成员变量的顺序, 结构体大小也会随之改变</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该结构体占据12字节</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> a;</span><br><span class=\"line\">    <span class=\"type\">int</span> b;</span><br><span class=\"line\">    <span class=\"type\">short</span> c;</span><br><span class=\"line\">&#125; Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//该结构体占据8字节</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> a;</span><br><span class=\"line\">    <span class=\"type\">short</span> c;</span><br><span class=\"line\">    <span class=\"type\">int</span> b;</span><br><span class=\"line\">&#125; Test;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"4-修改对齐方式\"><a href=\"#4-修改对齐方式\" class=\"headerlink\" title=\"4. 修改对齐方式\"></a><strong>4. 修改对齐方式</strong></h4><p>C语言允许通过编译器的特定指令或属性来修改结构体的对齐方式。例如，在GCC编译器中，可以使用<code>__attribute__((packed))</code>来禁用填充字节：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试把attribute__((packed))删除，看看输出结果</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> a;</span><br><span class=\"line\">    <span class=\"type\">int</span> b;</span><br><span class=\"line\">    <span class=\"type\">short</span> c;</span><br><span class=\"line\">&#125; __attribute__((packed)) Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Test test;</span><br><span class=\"line\">    test.a = <span class=\"number\">0x12</span>;</span><br><span class=\"line\">    test.b = <span class=\"number\">0x12345678</span>;</span><br><span class=\"line\">    test.c = <span class=\"number\">0x1234</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *ptr = (<span class=\"type\">char</span> *)&amp;test;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">sizeof</span>(Test); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%02x\\n&quot;</span>, *(ptr + i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，结构体的总大小为7字节，成员变量之间没有填充字节。</p>\n<hr>\n<h4 id=\"5-对齐方式的意义\"><a href=\"#5-对齐方式的意义\" class=\"headerlink\" title=\"5. 对齐方式的意义\"></a><strong>5. 对齐方式的意义</strong></h4><ol>\n<li><p><strong>提高访问效率</strong>：</p>\n<ul>\n<li><p>对齐的内存访问通常比非对齐访问更快，因为硬件对对齐的内存访问进行了优化。</p>\n</li>\n<li><p>非对齐访问可能会导致额外的内存读取操作，降低性能。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>跨平台兼容性</strong>：</p>\n<ul>\n<li>不同的硬件平台可能有不同的对齐要求。通过明确指定对齐方式，可以确保结构体在不同平台上具有一致的内存布局。</li>\n</ul>\n</li>\n<li><p><strong>节省空间</strong>：</p>\n<ul>\n<li>在某些情况下，禁用对齐（如使用<code>packed</code>属性）可以节省内存空间，但这可能会牺牲访问效率。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a><strong>6. 总结</strong></h4><p>C语言结构体的存储方式是按照成员变量的声明顺序依次存储的，但实际的内存布局会受到对齐规则的影响。对齐规则确保每个成员变量的地址是其自身大小的整数倍，并且结构体的总大小是其最大成员变量对齐要求的整数倍。通过理解结构体的对齐方式，可以更好地优化内存使用和提高程序性能。</p>\n<p>了解了结构体的存储方式和对齐方式, 可以使用指针自增的方式访问结构体, 偏移合适的大小, 避开填充字节获取有效的信息, 或者直接禁用填充字节.<br>不过, 并不推荐使用指针自增这种方式访问, 指针类型是固定的, 取出来的数据也是按照指针类型取出, 但结构体中的数据却不全是同一类型, 用这种方法取数非常麻烦. 直接使用<code>指针名 + -&gt;</code>运算符, 简单且直观.</p>\n<h3 id=\"4-3-数组和结构体相互转换\"><a href=\"#4-3-数组和结构体相互转换\" class=\"headerlink\" title=\"4.3 数组和结构体相互转换\"></a>4.3 数组和结构体相互转换</h3><p>禁用填充字节的结构体与数组直接可以直接相互转化, 不会出现问题.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> a;</span><br><span class=\"line\">    <span class=\"type\">int</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//解除注释看一看</span></span><br><span class=\"line\"><span class=\"comment\">// __attribute__((packed))</span></span><br><span class=\"line\">Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> arr[<span class=\"number\">5</span>]=&#123;<span class=\"number\">0x12</span>,<span class=\"number\">0x12</span>,<span class=\"number\">0x34</span>,<span class=\"number\">0x56</span>,<span class=\"number\">0x78</span>&#125;;</span><br><span class=\"line\">    Test* ptr_test=(Test*)arr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x\\n&quot;</span>,ptr_test-&gt;a);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x\\n&quot;</span>,ptr_test-&gt;b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于结构体和数组相互转化, 试看如下的应用<br>如下是<a href=\"D:\\work\\ToF_radar\\LDROBOT_STL-27L_Development_Manual_CN_v0.2.pdf\">某品牌激光雷达开发手册</a>, 其中<code>3.1节 数据包格式</code>中描述了雷达向控制器(计算机)传输的数据包的格式, 并给出了数据结构定义.</p>\n<p>如何将<a href=\"D:\\work\\ToF_radar\\数据包结构.txt\">原始数据包</a>转化为结构体?</p>\n<p>首先使用数组作为接收缓冲区, 数组大小等于两个数据包大小, 数据类型为uint8_t, 也就是char</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PACKET_SIZE 47</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> header;<span class=\"comment\">//数据包头,固定为0x54</span></span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> packet_length;<span class=\"comment\">//数据包长度,固定为0x2c</span></span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> speed;<span class=\"comment\">//雷达旋转速度</span></span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> start_angle;<span class=\"comment\">//该数据包的起始角度</span></span><br><span class=\"line\">    LidarPointStructDef point[POINT_PER_PACKET];<span class=\"comment\">//激光点数据,每个数据包包含12个激光点</span></span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> end_angle;<span class=\"comment\">//该数据包的结束角度</span></span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> timestamp;<span class=\"comment\">//时间戳</span></span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> crc8;<span class=\"comment\">//CRC校验码</span></span><br><span class=\"line\">&#125; __attribute__((packed)) LidarPacket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接收数据包的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Recieve_LidarPacket</span><span class=\"params\">(<span class=\"type\">uint8_t</span> * rx_buffer)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">//具体实现不必关心</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> rx_buffer[PACKET_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">Recieve_LidarPacket(rx_buffer);<span class=\"comment\">//调用接收函数接收数据包,调用完成后rx_buffer就装了一个数据包长度的数据了,而且第一个数组元素就是数据包头</span></span><br><span class=\"line\"></span><br><span class=\"line\">LidarPacket* pLidarPacketStruct=(LidarPacket*)rx_buffer;<span class=\"comment\">//将uint8*类型的数组直接转化为LidarPacket*,由于LidarPacket被定义为禁用填充字节的模式,后续的所有元素都会按照顺序一一对应</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0x%2x&quot;</span>,pLidarPacketStruct-&gt;header);<span class=\"comment\">//可以直接使用指针访问对应元素,不会出现偏差</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>事实上, 对于任何拥有严格结构限制的数据, 禁用填充字节使用结构体接收, 是一种常见的应用. 如接收通讯协议数据, 接收特定文件格式. 同时也保证代码的可移植性,节省内存空间. 相应的劣势是访问结构体的时间会增加.</p>\n<h2 id=\"5-函数指针\"><a href=\"#5-函数指针\" class=\"headerlink\" title=\"5. 函数指针\"></a>5. 函数指针</h2><p>待续…</p>\n","excerpt":"","more":"<h2 id=\"1-指针的基础知识\"><a href=\"#1-指针的基础知识\" class=\"headerlink\" title=\"1. 指针的基础知识\"></a>1. 指针的基础知识</h2><h3 id=\"1-1-指针的基本语法\"><a href=\"#1-1-指针的基本语法\" class=\"headerlink\" title=\"1.1 指针的基本语法\"></a>1.1 指针的基本语法</h3><p>与指针操作相关的运算符: 解引用运算符<code>*</code>, 取地址运算符<code>&amp;</code></p>\n<p>指针的基本使用方法 或者说 最基础的语法如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//操作1</span></span><br><span class=\"line\"><span class=\"type\">int</span> contianer = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> content = <span class=\"number\">1</span>;</span><br><span class=\"line\">contianer = content;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//操作2</span></span><br><span class=\"line\"><span class=\"type\">int</span> * contianer = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> content = <span class=\"number\">1</span>;</span><br><span class=\"line\">contianer = &amp;content;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;contianer:%d&quot;</span>,*contianer);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;contianer:%d&quot;</span>,contianer);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;contianer:%x&quot;</span>,contianer);</span><br></pre></td></tr></table></figure>\n<p>对比以上两种操作</p>\n<p>指针用于存储地址, 通过地址可以找寻到该地址处的数据, 或者以该地址为起始地址的数据.</p>\n<h3 id=\"1-2-指针的简单应用\"><a href=\"#1-2-指针的简单应用\" class=\"headerlink\" title=\"1.2 指针的简单应用\"></a>1.2 指针的简单应用</h3><p>如何实现交换两个数的内容:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> a=<span class=\"string\">&#x27;B&#x27;</span>;<span class=\"comment\">//一个盒子里放着篮球</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> b=<span class=\"string\">&#x27;A&#x27;</span>;<span class=\"comment\">//另一个盒子里放着足球</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> temp=<span class=\"string\">&#x27;0&#x27;</span>;<span class=\"comment\">//有一个空盒子</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//使用一下三步完成交换</span></span><br><span class=\"line\">\ttemp = a;<span class=\"comment\">//篮球放在空盒子里, 原本放篮球的盒子现在为空</span></span><br><span class=\"line\">\ta = b;<span class=\"comment\">//足球放在空盒子里, 此时原本放足球的盒子是空 注意不是b = a;</span></span><br><span class=\"line\">\tb = temp; <span class=\"comment\">//空盒子中放入篮球, 完成物体的交换</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上是基本的交换两个数的实现, 这样写完全没问题. 如果我有10000个这样的数需要交换, 不可能写一万遍代码吧? 很自然的想到, 使用函数, 把重复使用的代码提取成一个函数.</p>\n<p>那么如何写呢?</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">char</span> a, <span class=\"type\">char</span> b)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> temp=<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//使用一下三步完成交换</span></span><br><span class=\"line\">\ttemp = a;<span class=\"comment\">//篮球放在空盒子里, 原本放篮球的盒子现在为空</span></span><br><span class=\"line\">\ta = b;<span class=\"comment\">//足球放在空盒子里, 此时原本放足球的盒子是空 注意不是b = a;</span></span><br><span class=\"line\">\tb = temp; <span class=\"comment\">//空盒子中放入篮球, 完成物体的交换</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了这个函数实现了</p>\n<p>接下来在主函数调用一下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">char</span> a, <span class=\"type\">char</span> b)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> temp=<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//使用一下三步完成交换</span></span><br><span class=\"line\">\ttemp = a;<span class=\"comment\">//篮球放在空盒子里, 原本放篮球的盒子现在为空</span></span><br><span class=\"line\">\ta = b;<span class=\"comment\">//足球放在空盒子里, 此时原本放足球的盒子是空 注意不是b = a;</span></span><br><span class=\"line\">\tb = temp; <span class=\"comment\">//空盒子中放入篮球, 完成物体的交换</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> a=<span class=\"string\">&#x27;B&#x27;</span>;<span class=\"comment\">//一个盒子里放着篮球</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> b=<span class=\"string\">&#x27;A&#x27;</span>;<span class=\"comment\">//另一个盒子里放着足球</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> temp=<span class=\"string\">&#x27;0&#x27;</span>;<span class=\"comment\">//有一个空盒子</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//使用一下三步完成交换</span></span><br><span class=\"line\">\tswap(a,b);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//把盒子里的球倒出来看看</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;box a:%c box b:%c\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;在这里给出输出&#x3D;&#x3D;</p>\n<p>可以看出输出不对, 盒子里的球并没有被交换</p>\n<p>为什么会这样?<br>原因在与swap函数</p>\n<blockquote>\n<p>[!NOTE] 函数的形式参数和实际参数<br>对于函数的参数：<br>在声明和定义时写在函数参数列表中的参数是形式上的参数, 起到占位置的作用, 所以叫形式参数, 简称形参.</p>\n<p>形参在你调用函数时告诉你这里应当填什么样的数据.</p>\n<p>在调用函数时, 写入到参数列表的参数才是实际用到的参数, 称为实际参数, 简称实参.</p>\n</blockquote>\n<p>在这里, 我们把两个参数传入其中, 只是在形参之间换来换去, 没有影响到实参.<br>试想一下, swap这个机器, 伸出两只机械臂, 要求你把篮球和足球放上去, 于是你另外拿了两个球给它, 它把球左手倒右手一换, 对你手上两个的盒子和其中的内容却没有任何影响.</p>\n<p>请注意, 我们的要实现交换两个球的目的, 不只要关心这两个球之间的关系, 还要关心球与盒子之间的关系, 一共是四个元素而不是两个元素.</p>\n<p>那么有没有一种东西, 既可以操作盒子, 又可以操作盒子中的内容呢?</p>\n<p>你好, 有的, 兄弟, 有的! 看一下指针吧, 兄弟!<br>指针本体可以操作盒子, 通过解引用操作可以操作盒子内的物品, 两个要求, 一次满足, 简直太完美了.</p>\n<p>于是就可以实现一个新的swap函数:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">new_swap</span><span class=\"params\">(<span class=\"type\">char</span> * a, <span class=\"type\">char</span> * b)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> temp = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttemp = *a;</span><br><span class=\"line\">\t*a = *b;</span><br><span class=\"line\">\t*b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//由于参数是两个指针, 因此调用函数传入参数时要注意使用取地址运算符传入地址</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> a=<span class=\"string\">&#x27;B&#x27;</span>;<span class=\"comment\">//一个盒子里放着篮球</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> b=<span class=\"string\">&#x27;A&#x27;</span>;<span class=\"comment\">//另一个盒子里放着足球</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> temp=<span class=\"string\">&#x27;0&#x27;</span>;<span class=\"comment\">//有一个空盒子</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//使用一下三步完成交换</span></span><br><span class=\"line\">\tswap(&amp;a,&amp;b);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//把盒子里的球倒出来看看</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;box a:%c box b:%c\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-指针和内存空间\"><a href=\"#2-指针和内存空间\" class=\"headerlink\" title=\"2. 指针和内存空间\"></a>2. 指针和内存空间</h2><h3 id=\"2-1-不同类型数据占据的存储空间\"><a href=\"#2-1-不同类型数据占据的存储空间\" class=\"headerlink\" title=\"2.1 不同类型数据占据的存储空间\"></a>2.1 不同类型数据占据的存储空间</h3><p> 为了合理的存储不同大小的数据, 既不浪费, 也不溢出, 有不同数据类型.<br> 为了应对不同的数据类型, 指针也有了不同的类型. 但是指针的类型和数据类型有一些区别.</p>\n<p>我们知道, 不同数据类型的本质区别就是占据的空间大小不同.</p>\n<p><img data-src=\"https://fuyunyou-note.oss-cn-wuhan-lr.aliyuncs.com/typora-user-images/202502071351935.png\" alt=\"image.png\"></p>\n<p>&#x3D;&#x3D;(此处给出数据类型大小表格)&#x3D;&#x3D;</p>\n<p>我们使用<code>sizeof()</code>运算符可以计算数据的大小, sizeof的用法类似函数(但它实际上不是参数而是运算符), 括号中传入参数, 返回一个数字(该返回值的类型为size_t) 表示传入的参数的占据空间大小, 以字节为单位.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of char:%d&quot;</span>,<span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>));</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of short:%d&quot;</span>,<span class=\"keyword\">sizeof</span>(<span class=\"type\">short</span>));</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of int:%d&quot;</span>,<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br></pre></td></tr></table></figure>\n\n<p>照这样来看数组应该根据存储数据类型的不同, 拥有不同的大小, 然而事实却不是这样. 一般来说, 指针拥有固定的大小.<br>原因也很简单, 指针存储的是地址, 所有的地址都是同一类型的数据, 不论是char还是int, 都是地址. 所以占据的大小都是相同的.</p>\n<p>那么可以说所有的指针都是同一类型的数据吗?<br>当然不能.<br>虽然指针本身所占的空间大小相同, 但其中包含的地址所指向的数据本身却是不同的.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> * char_ptr;</span><br><span class=\"line\"><span class=\"type\">short</span> * short_ptr;</span><br><span class=\"line\"><span class=\"type\">int</span> * int_ptr;</span><br></pre></td></tr></table></figure>\n<p>以上的数据声明中, 有<code>char *, short *, int *</code> 三种不同类型的数据, 可以这样理解, 其中的<code>*</code>(解引用运算符)表示这三者都是指针, 而char, short, int表示其中存储的数据的不同类型. 这两个方面的信息共同构成了指针的类型.<br>当计算机根据指针中存储的地址找到所在位置之后, 通过声明指针变量是给出char, int或其他数据类型的信息决定取一个字节或四个字节的数据.</p>\n<blockquote>\n<p>[!info] <code>void</code> 类型 和<code>void*</code> 类型<br><code>void</code> 表示无类型，不能直接用来定义变量，如<code>void x=0;</code>这条语句是不合法的。用在函数头的返回值或参数列表中，表示函数无参或无返回值。如<code>void func(void)</code>，表示一个既无参数有无返回值的函数。<br> <code>void*</code>表示无类型指针，可以用来定义变量，<code>void* ptr=&amp;x;</code>该语句是合法的。<code>void*</code>是为了满足一些函数的适配性而设计的（即泛型编程），例如，设计一个函数<code>long sumof(int a,int b)</code>用于计算两个数之和，因为不能确定要计算的两个数的大小，如果给出的参数超出了<code>int</code>类型的限制就会产生意想不到的结果。将其修改为<code>void* sumof(void* a,void* b,DATA_TYPE type)</code>，不论数据有多大，先接受了再说，同时传入数据类型，根据数据类型，在函数中采用不同的处理方式即可。</p>\n<p> 为何<code>void</code>不可以直接用于定义变量而<code>void*</code>可以？<br> <code>void*</code>归根到底是一个指针，用该类型定义变量编译器知道用多少内存来存储该变量，因为一台机器上的指针类型大小是固定的。而对于<code>void</code>类型的变量，编译器不知道该使用多大的内存来存储，因此无法直接定义变量。相应的，由于<code>void*</code>类型没有数据类型，因此不能直接对<code>void*</code>指针直接解引用，也不能直接使用<code>++</code>运算符。例如，语句<code>int a=0; void* ptr = &amp;a; b=*ptr</code>和<code>void* ptr=&amp;a; ptr++;</code>都是不合法的。</p>\n</blockquote>\n<h3 id=\"2-2-寻址空间和指针大小\"><a href=\"#2-2-寻址空间和指针大小\" class=\"headerlink\" title=\"2.2 寻址空间和指针大小\"></a>2.2 寻址空间和指针大小</h3><p>我们知道指针的大小一般都是相同的，那么会是多大呢？可以使用<code>sizeof()</code>运算符测算</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> b=<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">float</span> c=<span class=\"number\">1.1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> *ptr1=&amp;a;</span><br><span class=\"line\"><span class=\"type\">char</span> *ptr2=&amp;b;</span><br><span class=\"line\"><span class=\"type\">float</span> *ptr3=&amp;c;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of ptr1 = %d\\n&quot;</span>,<span class=\"keyword\">sizeof</span>(ptr1));</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of ptr2 = %d\\n&quot;</span>,<span class=\"keyword\">sizeof</span>(ptr2));</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of ptr3 = %d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(ptr3));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">size of ptr1 = <span class=\"number\">8</span></span><br><span class=\"line\">size of ptr2 = <span class=\"number\">8</span></span><br><span class=\"line\">size of ptr3 = <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n\n\n<p>大部分情况下, 结果都会是8. 这表示指针类型占据8字节空间大小.</p>\n<p>指针占据的空间是由CPU的寻址位数所决定的,  CPU的寻址位数决定了其能够访问的内存地址的范围，也决定了指针变量能够存储的地址值的位数。例如，在32位机器上，地址是由32个0或1的二进制序列组成，因此指针大小通常是4个字节（因为1个字节&#x3D;8比特位，32比特位&#x3D;4个字节）。而在64位机器上，地址需要64个0或1的二进制序列组成，因此指针大小通常是8个字节。</p>\n<p>当然cpu寻址位数并不是唯一的决定因素, 编译器的编译方式, 虚拟化技术的使用等其他原因可能导致指针大小与实际的CPU不匹配.</p>\n<p>cpu的寻址位数, 另一种说法, 也就是cpu的地址总线宽度, 决定了系统的地址空间的大小.</p>\n<p>我们在一些软件的release版本中经常能看见x86和x64后缀.</p>\n<p>x86是一种32位处理器架构，它广泛被应用于早期的计算机系统中。由于历史原因和广泛的兼容性，许多旧的软件和操作系统仍然基于x86架构。x86架构的处理器能够支持的内存寻址范围为2^32（约4GB），这在一定程度上限制了其在处理大数据和复杂计算任务时的能力。然而，对于许多日常应用和旧版软件来说，x86架构仍然足够满足需求。</p>\n<p>相比之下，x64（也称为x86-64或AMD64）是一种64位处理器架构，它提供了更大的内存寻址范围和更高的计算能力。x64架构的处理器能够支持的内存寻址范围为2^64（实际限制通常为16EB，即160亿GB），这使得它能够轻松应对大数据处理和复杂计算任务。此外，x64架构还向下兼容32位应用程序，这意味着用户可以在64位操作系统上运行旧的32位软件。</p>\n<p>因此，当软件的release版本后缀带有x86或x64时，这表示该软件分别针对32位或64位的处理器架构进行了优化。用户应该根据自己的操作系统和硬件平台选择合适的版本进行安装。如果你的操作系统是64位的，并且你的计算机硬件支持x64架构，那么建议选择x64版本的软件以获得更好的性能和兼容性。如果你的操作系统或硬件平台是32位的，或者你需要运行一些只能在32位环境下运行的旧版软件，那么你可能需要选择x86版本的软件。</p>\n<p>&#x3D;&#x3D;(推书) 汇编语言–王爽&#x3D;&#x3D;</p>\n<h3 id=\"2-3-数据的存储方式\"><a href=\"#2-3-数据的存储方式\" class=\"headerlink\" title=\"2.3 数据的存储方式\"></a>2.3 数据的存储方式</h3><h4 id=\"2-3-1-问题的引入\"><a href=\"#2-3-1-问题的引入\" class=\"headerlink\" title=\"2.3.1 问题的引入\"></a>2.3.1 问题的引入</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> int_data=<span class=\"number\">0x12345678</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> * char_ptr=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">char_ptr = (<span class=\"type\">char</span> *)(&amp;int_data);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0x%x&quot;</span>,*char_ptr);</span><br></pre></td></tr></table></figure>\n<p>以上示例输出内容是什么?</p>\n<p>在不同的平台上,  输出内容会有差别, 大部分人在PC上应该输出的是0x78, 而在一些特定平台, 则会输出0x12.</p>\n<p>原因是什么?</p>\n<p>先看看以上操作在干嘛,  定义一个<code>int</code>类型的变量, 取这个变量的地址, 强制类型转换成<code>char*</code>类型的指针, 并通过指针来访问该地址的内容.</p>\n<p>还记得我说的指针的类型的含义吗, <code>char *</code> 表示在数组存储的地址上访问<code>sizeof(char)</code> 大小的字节数目(1个字节), <code>int *</code>表示在数组存储的地址上访问<code>sizeof(int)</code> 大小的字节数目(一般为4个字节).</p>\n<p>也就是说, 原本的四字节大小的int_data通过这种访问方式被截断为一个字节</p>\n<p>在定义时, int_data被赋值为<code>0x12345678</code>, 其中<code>0x</code>表示其后的数据是16进制格式, 也就是说, 刚巧12,34,56,78分别各是一个字节<br>0x12&#x3D;0b 0001 0010 , 其他字节内容类似.</p>\n<p>接下来就是最关键的问题: 在四个字节的内容被裁剪为一个字节的情况下, 哪个字节会被返回?</p>\n<h4 id=\"2-3-2-字节序和存储模式\"><a href=\"#2-3-2-字节序和存储模式\" class=\"headerlink\" title=\"2.3.2 字节序和存储模式\"></a>2.3.2 字节序和存储模式</h4><p>从直觉来看, 最开始的12和最末尾的78应该是最有可能的, 结果也是符合直觉的.</p>\n<p>再来看一看这个数: 12 34 56 78.<br>我们读这个数是从12开始, 而这个数的最低位是78, 如果把这个数看成10进制,则 8是个位, 7是十位, 虽然16进制没有个位十位的说法, 但是原理是类似的, 8是最低位, 7是次低位.<br>78是最低字节(LSB, least significant byte), 相应的, 12是最高字节(MSB, most significant byte). 字节的高低称作字节序</p>\n<p>不论一个数是按照十进制还是十六进制, 或是二进制, 八进制等等, 数字总有其排列顺序.</p>\n<p>数中的字节讲顺序, 计算机里的存储也讲顺序, 计算机内存按照地址进行编号, 从0开始到虚拟地址空间的最大值, 依次增加, 数据依次存储在其中. 0x1000是低地址, 0x1003是高地址</p>\n<p>根据字节序的存储地址不同, 可以分为两种存储模式</p>\n<ol>\n<li><strong>大端存储</strong>：在大端存储模式下，数据的高字节（或称作高位、最重要字节）被存储在内存的低地址处，而数据的低字节（或称作低位、最不重要字节）存储在高地址处。这意味着当你从低地址向高地址读取内存时，数据会按照从高到低的顺序出现。例如，对于十六进制数0x1234，在大端模式下，内存中的布局就是0x12在前（低地址），0x34在后（高地址）。</li>\n<li><strong>小端存储</strong>：在小端存储模式下，数据的低字节存储在内存的低地址处，而高字节存储在高地址处。也就是说，当你从低地址开始读取时，最先读到的是数据的低字节，然后才是高字节。对于相同的十六进制数0x1234，在小端模式下，内存布局会是0x34在前（低地址），0x12在后（高地址）。</li>\n</ol>\n<p>于是, 对于0x12345678</p>\n<ol>\n<li><strong>在大端存储模式下</strong>：<ul>\n<li><code>int_data</code>的内存布局（从低地址到高地址）将是：<code>0x12</code>, <code>0x34</code>, <code>0x56</code>, <code>0x78</code>。</li>\n<li><code>char_ptr</code>指向<code>int_data</code>的第一个字节，即<code>0x12</code>。</li>\n<li>因此，<code>printf(&quot;%x&quot;, *char_ptr);</code>将输出<code>12</code>。</li>\n</ul>\n</li>\n<li><strong>在小端存储模式下</strong>：<ul>\n<li><code>int_data</code>的内存布局（从低地址到高地址）将是：<code>0x78</code>, <code>0x56</code>, <code>0x34</code>, <code>0x12</code>。</li>\n<li><code>char_ptr</code>指向<code>int_data</code>的第一个字节，即<code>0x78</code>。</li>\n<li>因此，<code>printf(&quot;%x&quot;, *char_ptr);</code>将输出<code>78</code>。</li>\n</ul>\n</li>\n</ol>\n<p>因此，该代码在大端存储模式下输出<code>12</code>，在小端存储模式下输出<code>78</code>。</p>\n<p>[[C语言指针系列图解.excalidraw]]</p>\n<p>使用以下方式可以判断机器是那种存储方式?</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*(<span class=\"type\">char</span> *)&amp;num == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Little-endian\\n&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Big-endian\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>[!note] 注意<br>你应当注意到了, 不论指针所指向的数据占据的内存空间有多大, 它总是指向数据占据的最低地址, 这一点在数组中也是适用的, 具体会在接下来的<code>3.指针与数组</code>部分详解.</p>\n</blockquote>\n<h2 id=\"3-指针和数组\"><a href=\"#3-指针和数组\" class=\"headerlink\" title=\"3. 指针和数组\"></a>3. 指针和数组</h2><h3 id=\"3-1-使用指针操作数组\"><a href=\"#3-1-使用指针操作数组\" class=\"headerlink\" title=\"3.1 使用指针操作数组\"></a>3.1 使用指针操作数组</h3><p>数组被用来存储一系列相同类型的数据</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">10</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>对于数组的基本用法这里不多赘述, 如果不了解建议补充一下基础知识.</p>\n<p>我们知道, 数组通过数组下标取数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> x=a[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<p>取数组的第一个元素赋值给变量x.</p>\n<p>然而还有另一种用法, 数组名是一个相应类型的指针.</p>\n<p>以上例子中, <code>a</code>可以直接赋值给<code>int *</code>类型的指针使用，且是一个合法地址。该地址是数组第一个元素的地址。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> * int_ptr=a;</span><br></pre></td></tr></table></figure>\n<p>以上写法, 编译既不会报错, 也不会警告. 是合法合规而且经常使用的写法.</p>\n<p>于是, 对于数组的元素的访问, 可以有两种不同的方式完成.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">10</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> data1=a[<span class=\"number\">0</span>];<span class=\"comment\">//访问第一个数组元素</span></span><br><span class=\"line\"><span class=\"type\">int</span> data2=*(a+<span class=\"number\">1</span>);<span class=\"comment\">//访问第一个数组元素之后的一个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;data1:%d&quot;</span>,data1);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;data2:%d&quot;</span>,data2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出:</span></span><br><span class=\"line\">data1:<span class=\"number\">1</span></span><br><span class=\"line\">data2:<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指针运算\"><a href=\"#指针运算\" class=\"headerlink\" title=\"指针运算\"></a>指针运算</h3><p>以上代码涉及到一个新的操作：指针运算<br>仔细观察其中的写法,：<code>*(a+1)</code>, 表示a增加“1”, 然后解引用。</p>\n<p>一般来说, “加1”操作是直接作用在数值上的，加上1就是数值变大1，但是对于指针来说, 这个<code>1</code>不是大小上的1, 而是单位<code>1</code>.<br>这里的单位1为指针存储的类型所占的字节数。</p>\n<p>之前讲解过, 对于<code>char *</code>,<code>int*</code>等不同类型的指针的含义:</p>\n<p>“<code>char *</code> 表示在数组存储的地址上访问<code>sizeof(char)</code> 大小的字节数目(1个字节), <code>int *</code>表示在数组存储的地址上访问<code>sizeof(int)</code> 大小的字节数目(一般为4个字节)”</p>\n<p>对于<code>char *</code>类型的数据, 自增以<code>char</code>类型的大小为单位1, 其值就是1个字节.<br>假设<code>char * char_ptr=0x1000</code> 那么<code>char_ptr+1</code>后, 其值为<code>0x1001</code>. 而如果是<code>int_ptr+1</code>, 其值为<code>0x1004</code>. 其他类型与此相似.</p>\n<p>&#x3D;&#x3D;(在这里给出数组数据在内存中的排列)&#x3D;&#x3D;<br>[[C语言指针系列图解.excalidraw]]</p>\n<p>指针运算的这种设计极好的契合了数组操作, 数组各个元素可以直接依照自增取数.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">10</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,*(a+i));</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,a[i]);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上两种写法都能遍历数组</p>\n<blockquote>\n<p>[!error] 数组名和指针的区别<br>看了以上的内容，你可能会认为数组名就是一个指向数组首元素地址的指针，并完全把它当作指针来使用。但数组名不是一个指针，和不能混为一谈。请看如下示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"type\">int</span> arr[<span class=\"number\">5</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">&gt;<span class=\"type\">int</span> a=*(arr++);</span><br><span class=\"line\">&gt;<span class=\"comment\">//报错：error: lvalue required as increment operand</span></span><br></pre></td></tr></table></figure>\n<p>以上代码中<code>arr++</code>操作是不合法的，编译报错的意思是说<code>++</code>运算符需要一个左值作为其操作数，虽然数组名是一个左值，但不是一个可以修改的左值。这样是有原因的，数组名作为一个数组的标识（symbol）应该永远指向数组的首地址，不应被任何操作更改，这样才能保证对数组任意元素的正常访问。<br>那么为什么<code>arr+1</code>这样的操作是合法的？<br>原因是”+1“操作不会改变arr本身的值，arr+1这样的表达式最终的结果是一个右值，终究是要赋值给某个变量或作为其他运算符的操作数使用。无论是哪种情况，都不会影响arr中存储的值。</p>\n</blockquote>\n<h3 id=\"3-2-数组到指针的退化\"><a href=\"#3-2-数组到指针的退化\" class=\"headerlink\" title=\"3.2 数组到指针的退化\"></a>3.2 数组到指针的退化</h3><p>在 C&#x2F;C++ 中，​<strong>数组到指针的退化（array-to-pointer decay）​</strong>​ 是一个重要的隐式转换机制，它决定了数组名在大多数情况下如何被自动转换为指针。理解这个概念对掌握 C&#x2F;C++ 的指针和数组操作至关重要。</p>\n<hr>\n<h4 id=\"​1-什么是数组到指针的退化？​​\"><a href=\"#​1-什么是数组到指针的退化？​​\" class=\"headerlink\" title=\"​1. 什么是数组到指针的退化？​​\"></a>​<strong>1. 什么是数组到指针的退化？​</strong>​</h4><ul>\n<li>​<strong>数组名 <code>arr</code> 在大多数表达式中会自动转换为指向其首元素的指针</strong>。</li>\n<li>这种转换是隐式的（编译器自动完成），称为 ​<strong>​”退化（decay）”​</strong>。</li>\n<li>退化后，数组名 <code>arr</code> 不再代表整个数组，而是变成一个指向 <code>arr[0]</code> 的指针（类型 <code>T*</code>，其中 <code>T</code> 是数组元素的类型）。</li>\n</ul>\n<p>​<strong>示例</strong>​</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> *p = arr;  <span class=\"comment\">// 数组名 arr 退化为 int* 指针</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>arr</code> 原本是一个 <code>int[5]</code> 类型的数组，但在赋值给 <code>p</code> 时，它退化为 <code>int*</code> 类型（指向 <code>arr[0]</code>）。</li>\n</ul>\n<hr>\n<h4 id=\"​2-何时发生数组到指针的退化？​​\"><a href=\"#​2-何时发生数组到指针的退化？​​\" class=\"headerlink\" title=\"​2. 何时发生数组到指针的退化？​​\"></a>​<strong>2. 何时发生数组到指针的退化？​</strong>​</h4><p>数组名在以下情况下会退化为指针：</p>\n<ol>\n<li><p>​<strong>作为函数参数传递时</strong>​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">int</span> *p)</span>;  <span class=\"comment\">// 函数接受指针</span></span><br><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">func(arr);  <span class=\"comment\">// arr 退化为 int* 指针</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>即使函数声明为 <code>void func(int p[5])</code>，<code>p</code> 仍然会被当作 <code>int*</code> 处理（数组语法只是语法糖）。</li>\n</ul>\n</li>\n<li><p>​<strong>在算术运算（<code>+</code>, <code>-</code>, <code>++</code>, <code>--</code>）中</strong>​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> *p = arr + <span class=\"number\">1</span>;  <span class=\"comment\">// arr 退化为指针，然后 +1 运算</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>​<strong>在 <code>[]</code> 运算符中</strong>​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> val = arr[<span class=\"number\">2</span>];  <span class=\"comment\">// 等价于 *(arr + 2)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>​<strong>在比较运算 （ <code>!=</code>, <code>&lt;</code>, <code>&gt;</code> 等）中</strong>​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (arr == <span class=\"literal\">NULL</span>) &#123; ... &#125;  <span class=\"comment\">// arr 退化为指针</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>​<strong>在初始化指针时</strong>​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> *p = arr;  <span class=\"comment\">// arr 退化为指针</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h4 id=\"​3-何时不会发生退化？​​\"><a href=\"#​3-何时不会发生退化？​​\" class=\"headerlink\" title=\"​3. 何时不会发生退化？​​\"></a>​<strong>3. 何时不会发生退化？​</strong>​</h4><p>数组名在以下情况下<strong>不会退化为指针</strong>，仍然保持数组类型：</p>\n<ol>\n<li><p>​**<code>sizeof(arr)</code>**​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">size_t</span> size = <span class=\"keyword\">sizeof</span>(arr);  <span class=\"comment\">// 返回整个数组的大小（5 * sizeof(int)）</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果 <code>arr</code> 退化为指针，<code>sizeof(arr)</code> 会返回指针的大小（如 4 或 8 字节），而不是数组大小。</li>\n</ul>\n</li>\n<li><p>​**<code>&amp;arr</code>（取数组地址）​**​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> (*ptr_to_array)[<span class=\"number\">5</span>] = &amp;arr;  <span class=\"comment\">// 返回 int(*)[5] 类型（数组指针）</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>&amp;arr</code> 返回的是<strong>指向整个数组的指针</strong>​（<code>int(*)[5]</code>），而不是指向首元素的指针（<code>int*</code>）。</li>\n</ul>\n</li>\n<li><p>​<strong>字符串字面量初始化字符数组时</strong>​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[] = <span class=\"string\">&quot;hello&quot;</span>;  <span class=\"comment\">// str 是数组，不会退化为指针</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h4 id=\"​4-退化后的指针类型​\"><a href=\"#​4-退化后的指针类型​\" class=\"headerlink\" title=\"​4. 退化后的指针类型​\"></a>​<strong>4. 退化后的指针类型</strong>​</h4><ul>\n<li><p>如果 <code>arr</code> 是 <code>T[N]</code> 类型（<code>T</code> 是元素类型，<code>N</code> 是数组大小），则退化后的指针类型是 <code>T*</code>。</p>\n</li>\n<li><p>​<strong>示例</strong>​：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">5</span>];     <span class=\"comment\">// 类型是 int[5]</span></span><br><span class=\"line\"><span class=\"type\">int</span> *p = arr;   <span class=\"comment\">// 退化后 p 的类型是 int*</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h4 id=\"​5-退化与指针算术​\"><a href=\"#​5-退化与指针算术​\" class=\"headerlink\" title=\"​5. 退化与指针算术​\"></a>​<strong>5. 退化与指针算术</strong>​</h4><p>由于退化后的 <code>arr</code> 变成 <code>T*</code>，我们可以对它进行指针算术运算：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> *p = arr;     <span class=\"comment\">// p 指向 arr[0]</span></span><br><span class=\"line\"><span class=\"type\">int</span> *q = p + <span class=\"number\">3</span>;   <span class=\"comment\">// q 指向 arr[3]（即 4）</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>arr + i</code> 等价于 <code>&amp;arr[0] + i</code>，计算的是第 <code>i</code> 个元素的地址。</li>\n</ul>\n<hr>\n<h4 id=\"​6-退化与多维数组​\"><a href=\"#​6-退化与多维数组​\" class=\"headerlink\" title=\"​6. 退化与多维数组​\"></a>​<strong>6. 退化与多维数组</strong>​</h4><p>对于多维数组，退化规则仍然适用，但会逐层退化：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> matrix[<span class=\"number\">3</span>][<span class=\"number\">4</span>];  <span class=\"comment\">// int[3][4] 类型</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>​**<code>matrix</code> 退化为 <code>int(*)[4]</code>**​（指向 <code>int[4]</code> 的指针）。</li>\n<li>​**<code>matrix[0]</code> 退化为 <code>int*</code>**​（指向 <code>int</code> 的指针）。</li>\n</ul>\n<p> ​<strong>示例</strong>​</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> (*p)[<span class=\"number\">4</span>] = matrix;  <span class=\"comment\">// p 指向 matrix[0]（int[4] 类型）</span></span><br><span class=\"line\"><span class=\"type\">int</span> *q = matrix[<span class=\"number\">0</span>];    <span class=\"comment\">// q 指向 matrix[0][0]（int 类型）</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"​7-退化带来的问题​\"><a href=\"#​7-退化带来的问题​\" class=\"headerlink\" title=\"​7. 退化带来的问题​\"></a>​<strong>7. 退化带来的问题</strong>​</h4><p>由于退化是隐式的，可能会导致一些意外的行为：</p>\n<p> ​<strong>​(1) 数组大小信息丢失</strong>​</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">int</span> *p)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 无法知道 p 指向的数组有多大！</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">func(arr);  <span class=\"comment\">// 退化后，func 不知道 arr 的大小</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>​<strong>解决方案</strong>​：显式传递数组大小：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">int</span> *p, <span class=\"type\">size_t</span> size)</span>;</span><br><span class=\"line\">func(arr, <span class=\"keyword\">sizeof</span>(arr)/<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p> ​**​(2) 不能对退化后的指针使用 <code>sizeof</code>**​</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> *p = arr;</span><br><span class=\"line\"><span class=\"type\">size_t</span> s1 = <span class=\"keyword\">sizeof</span>(arr);  <span class=\"comment\">// 20（假设 int 是 4 字节）</span></span><br><span class=\"line\"><span class=\"type\">size_t</span> s2 = <span class=\"keyword\">sizeof</span>(p);    <span class=\"comment\">// 4 或 8（指针的大小）</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>sizeof(arr)</code> 返回整个数组的大小，但 <code>sizeof(p)</code> 返回指针的大小。</li>\n</ul>\n<hr>\n<h4 id=\"​8-如何避免退化？​​\"><a href=\"#​8-如何避免退化？​​\" class=\"headerlink\" title=\"​8. 如何避免退化？​​\"></a>​<strong>8. 如何避免退化？​</strong>​</h4><p>如果希望保留数组类型（防止退化），可以使用：</p>\n<ol>\n<li><p>​<strong>引用传递（C++）​</strong>​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">int</span> (&amp;arr)[<span class=\"number\">5</span>])</span>;  <span class=\"comment\">// 接受 int[5] 类型的引用</span></span><br><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">func(arr);  <span class=\"comment\">// 不会退化</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这样 <code>sizeof(arr)</code> 在函数内部仍然有效。</li>\n</ul>\n</li>\n<li><p>​<strong>使用 <code>std::array</code>（C++）​</strong>​：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;array&gt;</span></span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"type\">int</span>, <span class=\"number\">5</span>&gt; arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>std::array</code> 是 C++ 的容器，不会退化。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"​9-总结​\"><a href=\"#​9-总结​\" class=\"headerlink\" title=\"​9. 总结​\"></a>​<strong>9. 总结</strong>​</h4><table>\n<thead>\n<tr>\n<th>​<strong>关键点</strong>​</th>\n<th>​<strong>说明</strong>​</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>​<strong>什么是退化？​</strong>​</td>\n<td>数组名 <code>arr</code> 在大多数情况下隐式转换为 <code>&amp;arr[0]</code>（指针）。</td>\n</tr>\n<tr>\n<td>​<strong>何时发生？​</strong>​</td>\n<td>函数传参、指针运算、<code>[]</code> 操作、比较运算等。</td>\n</tr>\n<tr>\n<td>​<strong>何时不发生？​</strong>​</td>\n<td><code>sizeof(arr)</code>, <code>&amp;arr</code>, 初始化字符数组时。</td>\n</tr>\n<tr>\n<td>​<strong>退化后的类型</strong>​</td>\n<td><code>T[N]</code> → <code>T*</code>（指向首元素的指针）。</td>\n</tr>\n<tr>\n<td>​<strong>多维数组退化</strong>​</td>\n<td><code>int[3][4]</code> → <code>int(*)[4]</code>（指向行的指针）。</td>\n</tr>\n<tr>\n<td>​<strong>退化的问题</strong>​</td>\n<td>丢失数组大小信息，<code>sizeof</code> 行为不同。</td>\n</tr>\n<tr>\n<td>​<strong>如何避免？​</strong>​</td>\n<td>使用引用（C++）或 <code>std::array</code>（C++）。</td>\n</tr>\n</tbody></table>\n<p>理解 ​<strong>array-to-pointer decay</strong>​ 能帮助你更好地掌握 C&#x2F;C++ 的数组和指针操作，避免常见的陷阱！ 🚀</p>\n<h3 id=\"3-3-在数组中使用sizeof\"><a href=\"#3-3-在数组中使用sizeof\" class=\"headerlink\" title=\"3.3 在数组中使用sizeof()\"></a>3.3 在数组中使用sizeof()</h3><p>有如下代码示例，尝试运行，看看结果和你想的是否相同:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> *ptr=arr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of arr:%d&quot;</span>,<span class=\"keyword\">sizeof</span>(arr));</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of ptr:%d&quot;</span>,<span class=\"keyword\">sizeof</span>(ptr));</span><br></pre></td></tr></table></figure>\n\n\n<p>继续来看遍历数组的例子</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[]=&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">35</span>,<span class=\"number\">624</span>,<span class=\"number\">546</span>,<span class=\"number\">31</span>,<span class=\"number\">0</span>,<span class=\"number\">46</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> arr_size=<span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;arr_size;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,*(a+i));</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,a[i]);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>遍历数组是, for循环的终止条件是数组的长度.<br>直接在循环中写出数组长度的数字是一种不推荐的写法, 有几个缺点:</p>\n<ol>\n<li>对于明确给出长度的数组, 我们可以直接知道它的长度, 但对于没有给出长度的数组, 不能一眼看出它的长度.</li>\n<li>直接在for循环中使用数组长度的数字,  是一种硬编码方式, 如果要改动数组大小, 那么每一个在程序中用到的数组遍历操作都要更改代码, 非常麻烦.</li>\n</ol>\n<p>更推荐使用的方法是使用sizeof()运算符:<br>具体操作如下:<br><code>arr_size = sizeof(arr_name)/sizeof(data_type)</code></p>\n<p><code>sizeof(arr_name)</code>计算数组的所有元素占据的字节数, <code>sizeof(data_type)</code>计算数组每个元素占据的字节数. 两个数一除, 就能算出数组大小.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用以上方法遍历数组</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a[]=&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">35</span>,<span class=\"number\">624</span>,<span class=\"number\">546</span>,<span class=\"number\">31</span>,<span class=\"number\">0</span>,<span class=\"number\">46</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"keyword\">sizeof</span>(a)/<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>);i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,*(a+i));</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,a[i]);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"sizeof和strlen的区别\"><a href=\"#sizeof和strlen的区别\" class=\"headerlink\" title=\"sizeof和strlen的区别\"></a>sizeof和strlen的区别</h4><p>在以上示例中提到了数组的一个用法: 即使用字符数组存储字符串. 对于这样的字符串既可以使用sizeof()获取其长度, 也可以使用strlen()<br>来看一下sizeof和strlen的区别:</p>\n<h4 id=\"1-定义与性质\"><a href=\"#1-定义与性质\" class=\"headerlink\" title=\"1. 定义与性质\"></a>1. 定义与性质</h4><ol>\n<li><p><strong>sizeof</strong></p>\n<ul>\n<li>性质：是C&#x2F;C++中的一个运算符，用于计算变量或数据类型所占的内存大小。</li>\n<li>返回值：其返回值是size_t类型，表示某种类型或对象的字节数。</li>\n<li>计算时机：sizeof是在编译时计算的，而不是运行时，这使得它非常高效。</li>\n</ul>\n</li>\n<li><p><strong>strlen</strong></p>\n<ul>\n<li>性质：是C语言标准库中的一个函数，用于计算字符串的长度。</li>\n<li>语法：<code>size_t strlen(const char *str);</code></li>\n<li>参数：str表示要计算长度的字符串，以’\\0’结尾的字符指针。</li>\n<li>返回值：返回字符串str的字符数量，不包含’\\0’结尾字符。</li>\n<li>计算时机：strlen的结果是在运行时计算出来的。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"2-使用场景与限制\"><a href=\"#2-使用场景与限制\" class=\"headerlink\" title=\"2. 使用场景与限制\"></a>2. 使用场景与限制</h4><ol>\n<li><p><strong>sizeof</strong></p>\n<ul>\n<li>可以用于数据类型、变量、数组、结构体等，返回它们在内存中的大小，单位是字节。</li>\n<li>对于数组，sizeof可以直接给出数组所占用的内存大小。但需要注意，当数组作为函数参数传递时，它会被退化为指针，此时使用sizeof来计算数组的大小将返回指针的大小，而不是数组的实际大小。</li>\n<li>对于指针，sizeof返回的是指针本身的大小，而不是它所指向的内容的大小。</li>\n</ul>\n</li>\n<li><p><strong>strlen</strong></p>\n<ul>\n<li>只能用于计算以’\\0’结尾的字符串的长度。</li>\n<li>如果字符串没有以’\\0’结尾，strlen的行为是未定义的，可能会继续计算直到遇到内存中的某个’\\0’字符为止。</li>\n<li>strlen的参数必须是char*类型的指针，不能用于其他数据类型。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"3-示例对比\"><a href=\"#3-示例对比\" class=\"headerlink\" title=\"3. 示例对比\"></a>3. 示例对比</h4><p>以下是一个简单的示例，用于说明sizeof和strlen在实际编程中的使用：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> str[] = <span class=\"string\">&quot;Hello, World!&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *ptr = str;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Sizeof str: %zu bytes\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(str));  <span class=\"comment\">// 输出数组的大小，包括结尾的&#x27;\\0&#x27;</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Sizeof ptr: %zu bytes\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(ptr));  <span class=\"comment\">// 输出指针的大小</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Strlen of str: %zu\\n&quot;</span>, <span class=\"built_in\">strlen</span>(str));     <span class=\"comment\">// 输出字符串的长度，不包括结尾的&#x27;\\0&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，<code>sizeof(str)</code>返回的是数组<code>str</code>所占用的内存大小，包括结尾的’\\0’字符；而<code>sizeof(ptr)</code>返回的是指针<code>ptr</code>本身所占用的内存大小，与它所指向的字符串的长度无关。<code>strlen(str)</code>则返回的是字符串<code>str</code>的长度，不包括结尾的’\\0’字符。</p>\n<h2 id=\"4-指针和结构体\"><a href=\"#4-指针和结构体\" class=\"headerlink\" title=\"4. 指针和结构体\"></a>4. 指针和结构体</h2><h3 id=\"4-1-基本用法\"><a href=\"#4-1-基本用法\" class=\"headerlink\" title=\"4.1 基本用法\"></a>4.1 基本用法</h3><p>使用结构体可以把相关的数据有逻辑的组合在一起, 并通过<code>结构体名称+ .</code>来引用结构体中的变量</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span> <span class=\"comment\">// 包含strcpy函数的头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> id;         <span class=\"comment\">// 学生学号</span></span><br><span class=\"line\">    <span class=\"type\">char</span> name[<span class=\"number\">50</span>];  <span class=\"comment\">// 学生姓名</span></span><br><span class=\"line\">    <span class=\"type\">float</span> score;    <span class=\"comment\">// 学生成绩</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> <span class=\"title\">stu</span>;</span><span class=\"comment\">//创建一个Student类型的数据stu</span></span><br><span class=\"line\">\tstu.id=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(stu.name, <span class=\"string\">&quot;zhangsan&quot;</span>); <span class=\"comment\">// 使用strcpy函数复制字符串</span></span><br><span class=\"line\">\tstu.score=<span class=\"number\">85.0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出结构体和数组是很像的, 都是用来存储一系列数据的. 二者的区别在于同一结构体中可以包含不同数据类型的数据, 而一个数组中所有数据的数据类型都相同<br>结构体中也可以包含数组作为其元素, 如上所示, <code>char name[50]</code>是用于存储学生姓名的数组.</p>\n<p><strong>通过typedef为结构体起一个别名</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用typedef定义一个结构体,为其起一个别名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//写法1:</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> id;        <span class=\"comment\">// 学生学号</span></span><br><span class=\"line\">    <span class=\"type\">char</span> name[<span class=\"number\">50</span>]; <span class=\"comment\">// 学生姓名</span></span><br><span class=\"line\">    <span class=\"type\">float</span> score;   <span class=\"comment\">// 学生成绩</span></span><br><span class=\"line\">&#125; Stu;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">起别名后可以一直使用别名,于是结构体原本的名字可以省略掉</span></span><br><span class=\"line\"><span class=\"comment\">写法2:</span></span><br><span class=\"line\"><span class=\"comment\">typedef struct</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int id;        // 学生学号</span></span><br><span class=\"line\"><span class=\"comment\">    char name[50]; // 学生姓名</span></span><br><span class=\"line\"><span class=\"comment\">    float score;   // 学生成绩</span></span><br><span class=\"line\"><span class=\"comment\">&#125; Stu;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以上两种写法是一样的</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Stu stu; <span class=\"comment\">// 创建一个Stu类型的数据stu.因为起了别名,此处可以直接使用别名</span></span><br><span class=\"line\">    stu.id = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(stu.name, <span class=\"string\">&quot;zhangsan&quot;</span>); <span class=\"comment\">// 使用strcpy函数复制字符串</span></span><br><span class=\"line\">    stu.score = <span class=\"number\">85.0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-使用指针操作结构体\"><a href=\"#4-2-使用指针操作结构体\" class=\"headerlink\" title=\"4.2 使用指针操作结构体\"></a>4.2 使用指针操作结构体</h3><p>结构体同样可以通过指针来操作</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用typedef定义一个结构体,为其起一个别名</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> id;        <span class=\"comment\">// 学生学号</span></span><br><span class=\"line\">    <span class=\"type\">char</span> name[<span class=\"number\">50</span>]; <span class=\"comment\">// 学生姓名</span></span><br><span class=\"line\">    <span class=\"type\">float</span> score;   <span class=\"comment\">// 学生成绩</span></span><br><span class=\"line\">&#125; Stu;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Stu stu; <span class=\"comment\">// 创建一个Stu类型的数据stu.因为起了别名,此处可以直接使用别名</span></span><br><span class=\"line\">    stu.id = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(stu.name, <span class=\"string\">&quot;zhangsan&quot;</span>); <span class=\"comment\">// 使用strcpy函数复制字符串</span></span><br><span class=\"line\">    stu.score = <span class=\"number\">85.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Stu* ptr_stu;<span class=\"comment\">// 创建一个指向Stu类型的指针ptr_stu</span></span><br><span class=\"line\">    ptr_stu-&gt;id = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(ptr_stu-&gt;name, <span class=\"string\">&quot;zhangsan&quot;</span>); <span class=\"comment\">// 使用strcpy函数复制字符串</span></span><br><span class=\"line\">    ptr_stu-&gt;score = <span class=\"number\">85.0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用指针同样可以操作结构体成员, 使用<code>指针名+ -&gt;</code>运算符即可.</p>\n<p>既然涉及到了指针操作, 那么来看一看结构体在内存中的存储方式吧</p>\n<hr>\n<h4 id=\"1-结构体的存储方式\"><a href=\"#1-结构体的存储方式\" class=\"headerlink\" title=\"1. 结构体的存储方式\"></a><strong>1. 结构体的存储方式</strong></h4><p>结构体在内存中的存储方式是按照其成员变量的声明顺序依次存储的。每个成员变量占用的内存空间取决于其数据类型。例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Example</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> a;    <span class=\"comment\">// 1字节</span></span><br><span class=\"line\">    <span class=\"type\">int</span> b;     <span class=\"comment\">// 4字节</span></span><br><span class=\"line\">    <span class=\"type\">short</span> c;   <span class=\"comment\">// 2字节</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在没有考虑对齐的情况下，结构体的内存布局大致如下：</p>\n<ul>\n<li><p><code>char a</code> 占用1字节。</p>\n</li>\n<li><p><code>int b</code> 占用4字节。</p>\n</li>\n<li><p><code>short c</code> 占用2字节。</p>\n</li>\n</ul>\n<p>因此，结构体的总大小应该是 <code>1 + 4 + 2 = 7</code> 字节。然而，实际的存储方式会受到对齐规则的影响。</p>\n<hr>\n<h4 id=\"2-结构体的对齐方式\"><a href=\"#2-结构体的对齐方式\" class=\"headerlink\" title=\"2. 结构体的对齐方式\"></a><strong>2. 结构体的对齐方式</strong></h4><p>为了提高内存访问效率，编译器通常会对结构体的成员变量进行对齐（alignment）。对齐规则确保每个成员变量的地址是其大小的整数倍。例如，一个4字节的<code>int</code>变量，其地址必须是4的倍数。</p>\n<h5 id=\"2-1-对齐规则\"><a href=\"#2-1-对齐规则\" class=\"headerlink\" title=\"2.1 对齐规则\"></a><strong>2.1 对齐规则</strong></h5><ol>\n<li><p><strong>成员变量对齐</strong>：</p>\n<ul>\n<li><p>每个成员变量的起始地址必须是其自身大小的整数倍。例如：</p>\n<ul>\n<li><p><code>char</code> 类型的变量对齐要求是1字节对齐。</p>\n</li>\n<li><p><code>short</code> 类型的变量对齐要求是2字节对齐。</p>\n</li>\n<li><p><code>int</code> 类型的变量对齐要求是4字节对齐。</p>\n</li>\n<li><p><code>long long</code> 类型的变量对齐要求是8字节对齐。</p>\n</li>\n</ul>\n</li>\n<li><p>如果成员变量的起始地址不符合对齐要求，编译器会在前面插入填充字节（padding）。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>结构体整体对齐</strong>：</p>\n<ul>\n<li><p>结构体的总大小必须是其最大成员变量对齐要求的整数倍。例如，如果结构体中最大的成员变量是4字节对齐的，那么整个结构体的大小必须是4的倍数。</p>\n</li>\n<li><p>如果结构体的总大小不符合对齐要求，编译器会在结构体的末尾插入填充字节。</p>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"3-示例分析\"><a href=\"#3-示例分析\" class=\"headerlink\" title=\"3. 示例分析\"></a><strong>3. 示例分析</strong></h4><p>以之前的结构体为例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Example</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> a;    <span class=\"comment\">// 1字节</span></span><br><span class=\"line\">    <span class=\"type\">int</span> b;     <span class=\"comment\">// 4字节</span></span><br><span class=\"line\">    <span class=\"type\">short</span> c;   <span class=\"comment\">// 2字节</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>假设系统的默认对齐规则如下：</p>\n<ul>\n<li><p><code>char</code>：1字节对齐</p>\n</li>\n<li><p><code>int</code>：4字节对齐</p>\n</li>\n<li><p><code>short</code>：2字节对齐</p>\n</li>\n</ul>\n<h5 id=\"3-1-成员变量对齐\"><a href=\"#3-1-成员变量对齐\" class=\"headerlink\" title=\"3.1 成员变量对齐\"></a><strong>3.1 成员变量对齐</strong></h5><ol>\n<li><p>**<code>char a</code>**：</p>\n<ul>\n<li><p>起始地址：0</p>\n</li>\n<li><p>占用1字节，对齐要求是1字节对齐，因此不需要填充。</p>\n</li>\n</ul>\n</li>\n<li><p>**<code>int b</code>**：</p>\n<ul>\n<li><p>起始地址：4（下一个4字节对齐的地址）</p>\n</li>\n<li><p>占用4字节，对齐要求是4字节对齐。</p>\n</li>\n<li><p>在<code>char a</code>和<code>int b</code>之间插入3个填充字节。</p>\n</li>\n</ul>\n</li>\n<li><p>**<code>short c</code>**：</p>\n<ul>\n<li><p>起始地址：8（下一个2字节对齐的地址）</p>\n</li>\n<li><p>占用2字节，对齐要求是2字节对齐。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"3-2-结构体整体对齐\"><a href=\"#3-2-结构体整体对齐\" class=\"headerlink\" title=\"3.2 结构体整体对齐\"></a><strong>3.2 结构体整体对齐</strong></h5><ul>\n<li><p>结构体的总大小：<code>1（char）+ 3（填充）+ 4（int）+ 2（short）= 10</code> 字节。</p>\n</li>\n<li><p>结构体中最大的成员变量是<code>int</code>，对齐要求是4字节。</p>\n</li>\n<li><p>因此，结构体的总大小必须是4的倍数。</p>\n</li>\n<li><p>在结构体的末尾插入2个填充字节，使得总大小为12字节。</p>\n</li>\n</ul>\n<p>最终，结构体在内存中的布局如下：</p>\n<p>[[C语言指针系列图解.excalidraw]]</p>\n<table>\n<thead>\n<tr>\n<th>地址</th>\n<th>数据</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td><code>char a</code></td>\n<td>成员变量</td>\n</tr>\n<tr>\n<td>1</td>\n<td>填充字节</td>\n<td>对齐<code>int b</code></td>\n</tr>\n<tr>\n<td>2</td>\n<td>填充字节</td>\n<td>对齐<code>int b</code></td>\n</tr>\n<tr>\n<td>3</td>\n<td>填充字节</td>\n<td>对齐<code>int b</code></td>\n</tr>\n<tr>\n<td>4</td>\n<td><code>int b</code></td>\n<td>成员变量</td>\n</tr>\n<tr>\n<td>8</td>\n<td><code>short c</code></td>\n<td>成员变量</td>\n</tr>\n<tr>\n<td>10</td>\n<td>填充字节</td>\n<td>对齐结构体</td>\n</tr>\n<tr>\n<td>11</td>\n<td>填充字节</td>\n<td>对齐结构体</td>\n</tr>\n</tbody></table>\n<p>结构体的总大小为12字节。</p>\n<p>值得注意的是, 改变结构体成员变量的顺序, 结构体大小也会随之改变</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该结构体占据12字节</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> a;</span><br><span class=\"line\">    <span class=\"type\">int</span> b;</span><br><span class=\"line\">    <span class=\"type\">short</span> c;</span><br><span class=\"line\">&#125; Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//该结构体占据8字节</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> a;</span><br><span class=\"line\">    <span class=\"type\">short</span> c;</span><br><span class=\"line\">    <span class=\"type\">int</span> b;</span><br><span class=\"line\">&#125; Test;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"4-修改对齐方式\"><a href=\"#4-修改对齐方式\" class=\"headerlink\" title=\"4. 修改对齐方式\"></a><strong>4. 修改对齐方式</strong></h4><p>C语言允许通过编译器的特定指令或属性来修改结构体的对齐方式。例如，在GCC编译器中，可以使用<code>__attribute__((packed))</code>来禁用填充字节：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试把attribute__((packed))删除，看看输出结果</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> a;</span><br><span class=\"line\">    <span class=\"type\">int</span> b;</span><br><span class=\"line\">    <span class=\"type\">short</span> c;</span><br><span class=\"line\">&#125; __attribute__((packed)) Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Test test;</span><br><span class=\"line\">    test.a = <span class=\"number\">0x12</span>;</span><br><span class=\"line\">    test.b = <span class=\"number\">0x12345678</span>;</span><br><span class=\"line\">    test.c = <span class=\"number\">0x1234</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *ptr = (<span class=\"type\">char</span> *)&amp;test;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">sizeof</span>(Test); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%02x\\n&quot;</span>, *(ptr + i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，结构体的总大小为7字节，成员变量之间没有填充字节。</p>\n<hr>\n<h4 id=\"5-对齐方式的意义\"><a href=\"#5-对齐方式的意义\" class=\"headerlink\" title=\"5. 对齐方式的意义\"></a><strong>5. 对齐方式的意义</strong></h4><ol>\n<li><p><strong>提高访问效率</strong>：</p>\n<ul>\n<li><p>对齐的内存访问通常比非对齐访问更快，因为硬件对对齐的内存访问进行了优化。</p>\n</li>\n<li><p>非对齐访问可能会导致额外的内存读取操作，降低性能。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>跨平台兼容性</strong>：</p>\n<ul>\n<li>不同的硬件平台可能有不同的对齐要求。通过明确指定对齐方式，可以确保结构体在不同平台上具有一致的内存布局。</li>\n</ul>\n</li>\n<li><p><strong>节省空间</strong>：</p>\n<ul>\n<li>在某些情况下，禁用对齐（如使用<code>packed</code>属性）可以节省内存空间，但这可能会牺牲访问效率。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a><strong>6. 总结</strong></h4><p>C语言结构体的存储方式是按照成员变量的声明顺序依次存储的，但实际的内存布局会受到对齐规则的影响。对齐规则确保每个成员变量的地址是其自身大小的整数倍，并且结构体的总大小是其最大成员变量对齐要求的整数倍。通过理解结构体的对齐方式，可以更好地优化内存使用和提高程序性能。</p>\n<p>了解了结构体的存储方式和对齐方式, 可以使用指针自增的方式访问结构体, 偏移合适的大小, 避开填充字节获取有效的信息, 或者直接禁用填充字节.<br>不过, 并不推荐使用指针自增这种方式访问, 指针类型是固定的, 取出来的数据也是按照指针类型取出, 但结构体中的数据却不全是同一类型, 用这种方法取数非常麻烦. 直接使用<code>指针名 + -&gt;</code>运算符, 简单且直观.</p>\n<h3 id=\"4-3-数组和结构体相互转换\"><a href=\"#4-3-数组和结构体相互转换\" class=\"headerlink\" title=\"4.3 数组和结构体相互转换\"></a>4.3 数组和结构体相互转换</h3><p>禁用填充字节的结构体与数组直接可以直接相互转化, 不会出现问题.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> a;</span><br><span class=\"line\">    <span class=\"type\">int</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//解除注释看一看</span></span><br><span class=\"line\"><span class=\"comment\">// __attribute__((packed))</span></span><br><span class=\"line\">Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> arr[<span class=\"number\">5</span>]=&#123;<span class=\"number\">0x12</span>,<span class=\"number\">0x12</span>,<span class=\"number\">0x34</span>,<span class=\"number\">0x56</span>,<span class=\"number\">0x78</span>&#125;;</span><br><span class=\"line\">    Test* ptr_test=(Test*)arr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x\\n&quot;</span>,ptr_test-&gt;a);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x\\n&quot;</span>,ptr_test-&gt;b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于结构体和数组相互转化, 试看如下的应用<br>如下是<a href=\"D:\\work\\ToF_radar\\LDROBOT_STL-27L_Development_Manual_CN_v0.2.pdf\">某品牌激光雷达开发手册</a>, 其中<code>3.1节 数据包格式</code>中描述了雷达向控制器(计算机)传输的数据包的格式, 并给出了数据结构定义.</p>\n<p>如何将<a href=\"D:\\work\\ToF_radar\\数据包结构.txt\">原始数据包</a>转化为结构体?</p>\n<p>首先使用数组作为接收缓冲区, 数组大小等于两个数据包大小, 数据类型为uint8_t, 也就是char</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PACKET_SIZE 47</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> header;<span class=\"comment\">//数据包头,固定为0x54</span></span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> packet_length;<span class=\"comment\">//数据包长度,固定为0x2c</span></span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> speed;<span class=\"comment\">//雷达旋转速度</span></span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> start_angle;<span class=\"comment\">//该数据包的起始角度</span></span><br><span class=\"line\">    LidarPointStructDef point[POINT_PER_PACKET];<span class=\"comment\">//激光点数据,每个数据包包含12个激光点</span></span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> end_angle;<span class=\"comment\">//该数据包的结束角度</span></span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> timestamp;<span class=\"comment\">//时间戳</span></span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> crc8;<span class=\"comment\">//CRC校验码</span></span><br><span class=\"line\">&#125; __attribute__((packed)) LidarPacket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接收数据包的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Recieve_LidarPacket</span><span class=\"params\">(<span class=\"type\">uint8_t</span> * rx_buffer)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">//具体实现不必关心</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> rx_buffer[PACKET_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">Recieve_LidarPacket(rx_buffer);<span class=\"comment\">//调用接收函数接收数据包,调用完成后rx_buffer就装了一个数据包长度的数据了,而且第一个数组元素就是数据包头</span></span><br><span class=\"line\"></span><br><span class=\"line\">LidarPacket* pLidarPacketStruct=(LidarPacket*)rx_buffer;<span class=\"comment\">//将uint8*类型的数组直接转化为LidarPacket*,由于LidarPacket被定义为禁用填充字节的模式,后续的所有元素都会按照顺序一一对应</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0x%2x&quot;</span>,pLidarPacketStruct-&gt;header);<span class=\"comment\">//可以直接使用指针访问对应元素,不会出现偏差</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>事实上, 对于任何拥有严格结构限制的数据, 禁用填充字节使用结构体接收, 是一种常见的应用. 如接收通讯协议数据, 接收特定文件格式. 同时也保证代码的可移植性,节省内存空间. 相应的劣势是访问结构体的时间会增加.</p>\n<h2 id=\"5-函数指针\"><a href=\"#5-函数指针\" class=\"headerlink\" title=\"5. 函数指针\"></a>5. 函数指针</h2><p>待续…</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-08-30T14:33:10.265Z","updated":"2025-08-30T14:31:55.090Z","comments":1,"layout":"post","photos":[],"_id":"cmezujptt0006qk8yhng4erqy","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}